ggarrange(heatmap_ggploted, enrich_panel, nrow = 2, heights = c(1, 1.45))
upper_enrich <- ggarrange(enrichKEGG_reactions, enrichDGN_reactions, nrow = 1, common.legend = T, labels = c("b","c")) %>% annotate_figure(left = text_grob("Reaction-related nodes", color = "black", rot = 90, face = "bold"))
lower_enrich <- ggarrange(enrichKEGG_transporters, enrichDGN_transporters, nrow = 1, common.legend = T, labels = c("d","e")) %>% annotate_figure(left = text_grob("Transport-related nodes", color = "black", rot = 90, face = "bold"))
enrich_panel <- ggarrange(upper_enrich, lower_enrich, common.legend = T, nrow = 2, heights = c(1.3,1))
ggarrange(heatmap_ggploted, enrich_panel, nrow = 2, heights = c(1, 1.4))
upper_enrich <- ggarrange(enrichKEGG_reactions, enrichDGN_reactions, nrow = 1, common.legend = T, labels = c("b","c")) %>% annotate_figure(left = text_grob("Reaction-related nodes", color = "black", rot = 90, face = "bold"))
lower_enrich <- ggarrange(enrichKEGG_transporters, enrichDGN_transporters, nrow = 1, common.legend = T, labels = c("d","e")) %>% annotate_figure(left = text_grob("Transport-related nodes", color = "black", rot = 90, face = "bold"))
enrich_panel <- ggarrange(upper_enrich, lower_enrich, common.legend = T, nrow = 2, heights = c(1.3,1))
ggarrange(heatmap_ggploted, enrich_panel, nrow = 2, heights = c(1, 1.4), labels = c("a",""))
library(arrow)
library(tidyverse)
library(ComplexHeatmap)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
library(fastcluster)
setwd("/DeepenData/Repos/geometric_cobra")
df     <-  read_csv("./results/dataframes/Non_masked_results_for_Heatmaps.csv") %>% dplyr::select(-c("...1"))
labels <- read_csv("./results/dataframes/Non_Masked_train_labels.csv")  %>%  dplyr::select(-c("...1")) %>% .[[1]]
edge_weights_x_patients <- df%>%  dplyr::select_if(is.numeric)
edges_genes   <- df%>%  dplyr::select_if(is.character)
n_edges <- nrow(edges_genes)
n_patients <- length(labels)
edges_mask    <- sample(c(T,F), n_edges, replace = T, prob = c(1, 0))
patients_mask <- sample(c(T,F), n_patients, replace = T, prob = c(.5, 0.5))
edge_weights_x_patients_SAMPLE <- edge_weights_x_patients[edges_mask,patients_mask]
labels_SAMPLE <- labels[patients_mask]
edges_genes_SAMPLE <- edges_genes[edges_mask,]
processed_data <- edge_weights_x_patients_SAMPLE %>% as.matrix() %>% rescale
dim(processed_data)
#view(edges_genes)
library(tidyverse)
setwd("/DeepenData/Repos/geometric_cobra")
df1 <-read_csv2("./metabolites_data/Base_de_datos_2010_2020_columnas_limpias.csv")
library(magrittr)
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","tir", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < tir)) %>%
filter( (0 < Phe) & (Phe < 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
#healthy$Condicion <- "Control"
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
#healthy_numeric$Glt[
#which.max(healthy_numeric$Glt)] <- NA
#%>%as.data.frame() %>% ggplot(aes(x=V1)) + geom_histogram()
check_in <- function(a_row){
return("out" %in% a_row) }
find_out_occurences <- function(df){
return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())
}
df <- data.frame(x = 1:5, y = 3:7, z = c(.01, .2,.4,1, 3e5))
df[2,2] <- NA
df[4,1] <- NA
df[2,1] <- NA
df
outliers_to_str <- function(a_col){
Q1 <- quantile(a_col, 0.15, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, 0.85, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
#mask <- (a_col < lower_bound) & (a_col > upper_bound)
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)
}
df%>% mutate_all(outliers_to_str)  %>% find_out_occurences  -> out_ocurrences
df[!out_ocurrences,]
healthy_numeric%>% mutate_all(outliers_to_str)  %>% find_out_occurences  -> out_ocurrences
healthy_numeric[!out_ocurrences,] -> healthy_dropped_patients
library(ggbeeswarm)
plot_swarm <- function(df){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=.1, alpha = 0.05) -> my_plot
return(my_plot)
}
healthy_dropped_patients %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
healthy_dropped_patients[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
healthy_dropped_patients[vars_q_2] %>% plot_swarm -> vars_q_2_PLOT
healthy_dropped_patients[vars_q_3] %>% plot_swarm -> vars_q_3_PLOT
healthy_dropped_patients[vars_q_4] %>% plot_swarm -> vars_q_4_PLOT
#a_col%>%as.data.frame() %>% ggplot(aes(x= . )) + geom_histogram()
library(ggpubr)
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
my_panel
healthy_dropped_patients
library(tidyverse)
setwd("/DeepenData/Repos/geometric_cobra")
df1 <-read_csv2("./metabolites_data/Base_de_datos_2010_2020_columnas_limpias.csv")
library(magrittr)
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","tir", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < tir)) %>%
filter( (0 < Phe) & (Phe < 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
#healthy$Condicion <- "Control"
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
#healthy_numeric$Glt[
#which.max(healthy_numeric$Glt)] <- NA
#%>%as.data.frame() %>% ggplot(aes(x=V1)) + geom_histogram()
check_in <- function(a_row){
return("out" %in% a_row) }
find_out_occurences <- function(df){
return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())
}
df <- data.frame(x = 1:5, y = 3:7, z = c(.01, .2,.4,1, 3e5))
df[2,2] <- NA
df[4,1] <- NA
df[2,1] <- NA
df
outliers_to_str <- function(a_col){
Q1 <- quantile(a_col, 0.20, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, 0.80, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
#mask <- (a_col < lower_bound) & (a_col > upper_bound)
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)
}
df%>% mutate_all(outliers_to_str)  %>% find_out_occurences  -> out_ocurrences
df[!out_ocurrences,]
healthy_numeric%>% mutate_all(outliers_to_str)  %>% find_out_occurences  -> out_ocurrences
healthy_numeric[!out_ocurrences,] -> healthy_dropped_patients
library(ggbeeswarm)
plot_swarm <- function(df){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=.1, alpha = 0.05) -> my_plot
return(my_plot)
}
healthy_dropped_patients %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
healthy_dropped_patients[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
healthy_dropped_patients[vars_q_2] %>% plot_swarm -> vars_q_2_PLOT
healthy_dropped_patients[vars_q_3] %>% plot_swarm -> vars_q_3_PLOT
healthy_dropped_patients[vars_q_4] %>% plot_swarm -> vars_q_4_PLOT
#a_col%>%as.data.frame() %>% ggplot(aes(x= . )) + geom_histogram()
library(ggpubr)
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
my_panel
healthy_dropped_patients
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed.data
imputed.data[[1]]%>% plot_swarm
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed.data[[1]]%>% plot_swarm
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed.data[[1]] %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed.data[[1]][vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
vars_mean
imputed.data[1][vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed.data[1]
imputed.data[1][vars_q_1]
vars_q_1
imputed.data[[1]]
vars_q_1
imputed.data[1]
imputed.data[1][vars_q_1]
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
imputed_data <-imputed.data[[1]]
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed_data[vars_q_1]
imputed_data
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed_data[vars_q_2] %>% plot_swarm -> vars_q_2_PLOT
imputed_data[vars_q_3] %>% plot_swarm -> vars_q_3_PLOT
imputed_data[vars_q_4] %>% plot_swarm -> vars_q_4_PLOT
#a_col%>%as.data.frame() %>% ggplot(aes(x= . )) + geom_histogram()
library(ggpubr)
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
my_panel
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed_data[vars_q_2] %>% plot_swarm -> vars_q_2_PLOT
imputed_data[vars_q_3] %>% plot_swarm -> vars_q_3_PLOT
imputed_data[vars_q_4] %>% plot_swarm -> vars_q_4_PLOT
#a_col%>%as.data.frame() %>% ggplot(aes(x= . )) + geom_histogram()
library(ggpubr)
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
my_panel
imputed_data
imputed_data %>% is.nan()
imputed_data
imputed_data %>% is.na()
imputed_data %>% is.na() %>% sum
imputed_data %>% is.na() %>% colSums()
imputed_data %>% is.na() %>% colSums()
dim(imputed_data)
library(tidyverse)
library(magrittr)
setwd("/DeepenData/Repos/geometric_cobra")
#metabolite_data        <- read_csv("./metabolites_data/metabolite_data.csv")
subsys_fluxes_non_zero <- arrow::read_parquet("./results/flux/subsys_fluxes_non_zero.parquet.gzip")
metabolite_data        <- arrow::read_parquet("./metabolites_data/metabolites_outliers_imputed.parquet.gzip")
get_data_subset <- function(df , condition, aminoacids){
df %<>%  select(!dplyr::matches('SA')) %>%
dplyr::filter(Group==condition) %>%
select_if(is.numeric)
if(aminoacids){df %<>% select(!dplyr::matches('C\\d+'))
} else {df %<>% select(dplyr::matches('C\\d+'))}
return(df)}
AAs_PKU        <- get_data_subset(metabolite_data, "PKU", T)
AcylCs_PKU     <- get_data_subset(metabolite_data, "PKU", F)
AAs_Control    <- get_data_subset(metabolite_data, "Control", T)
AcylCs_Control <- get_data_subset(metabolite_data, "Control", F)
AAs_Control
AcylCs_PKU
library(umap)
make_umap <- function(AAs_Control, AcylCs_Control,AAs_PKU, AcylCs_PKU){
data_control <-cbind(AAs_Control,AcylCs_Control)
data_PKU     <- cbind(AAs_PKU,AcylCs_PKU)
data_control["Group"] <- "Control"
data_PKU["Group"] <- "PKU"
data <- rbind(data_PKU,data_control)
UMAPM <- umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 50, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)
}
umap_original_data<- make_umap(AAs_Control, AcylCs_Control,AAs_PKU, AcylCs_PKU)
umap_original_data
augmented_metabolite_data
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data
augmented_metabolite_data %>% rename(label = slds)
augmented_metabolite_data %>% rename(slds = label)
names(augmented_metabolite_data)
augmented_metabolite_data %>% rename(c("s","ff") = c("label","Phe" ))
augmented_metabolite_data %>% rename(c(s, ff) = c(label,Phe))
names(augmented_metabolite_data)
augmented_metabolite_data %>% rename( phe = Phe)
names(augmented_metabolite_data)
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
names(augmented_metabolite_data)
augmented_metabolite_data %>% data.table::setnames(
old = c("tir","Glt"),
new = c('Tyr','Glu'))
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>% data.table::setnames(
old = c("tir","Glt"),
new = c('Tyr','Glu'))
augmented_metabolite_data %>% data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
augmented_metabolite_data %>% names
augmented_metabolite_data
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip") %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
augmented_metabolite_data
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip") %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
augmented_metabolite_data
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data
data %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
data
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
library(mixgb)
library(readxl)
setwd("/DeepenData/Repos/geometric_cobra")
df1 <-read_csv2("./metabolites_data/Base_de_datos_2010_2020_columnas_limpias.csv")
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","tir", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < tir)) %>%
filter( (0 < Phe) & (Phe < 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
#healthy$Condicion <- "Control"
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
############################################################################################################################################
df1_pku <- read_excel('./metabolites_data/Datos_Primera_Medición_PKU.xlsx')
vars_to_drop_NAs <- c("Fecha.entrega.informe","edad_diagnostico_dias","Phe")
df1_pku %>% drop_na(any_of(vars_to_drop_NAs)) %>% filter(edad_diagnostico_dias<=31)%>%
mutate(`Fecha.entrega.informe` = as.Date(`Fecha.entrega.informe`,"%d-%m-%Y")) %>%
mutate(`Fecha.Nacimiento` = as.Date(`Fecha.Nacimiento`,"%d-%m-%Y"))  %>%
filter(`Fecha.entrega.informe` > '2009-01-01')-> PKU
to_drop <- c("Paciente_PKU", "COMUNA", "REGION", "Condicion", "RUT", "Fecha.entrega.informe", "Fecha.Nacimiento", "estudio.molecular",
"Ciudad", "Sexo", "edad_diagnostico_dias", "FADIAG..mg.por.dL.",    "TIRDIAG.mg_por_dL","razon_FADIAG_TIRDIAG" ,"TDIAG")
PKU_numeric <- PKU %>% select(-c(to_drop)) %>% select_if(is_double)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>%  dplyr::select(-c(Phe)) %>% mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
impute_data_with_mixgb <- function(df){
for_mixgb <- data_clean(df)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed_data <-imputed.data[[1]] %>% as.data.frame()
return(imputed_data)}
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
plot_swarm_panel <- function(dropped_patients_done, size, alpha){
dropped_patients_done %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
dropped_patients_done[vars_q_1] %>% plot_swarm(size, alpha) -> vars_q_1_PLOT
dropped_patients_done[vars_q_2] %>% plot_swarm(size, alpha)  -> vars_q_2_PLOT
dropped_patients_done[vars_q_3] %>% plot_swarm(size, alpha)  -> vars_q_3_PLOT
dropped_patients_done[vars_q_4] %>% plot_swarm(size, alpha)  -> vars_q_4_PLOT
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
return(my_panel)}
remove_outliers_patients(healthy_numeric, 0.25, .75)         -> healthy_outliers_removed
impute_data_with_mixgb(healthy_outliers_removed)  -> healthy_outliers_inputation_done
#healthy_outliers_inputation_done %>% plot_swarm_panel(.01, .1)
remove_outliers_patients(PKU_numeric, 0.15, .85)         -> PKU_outliers_removed
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
#PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
data <- rbind(PKU_outliers_inputation_done, healthy_outliers_inputation_done)
library(introdataviz)
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
rain_height <- .1
colours <- c("dodgerblue2", "darkorange")
get_vars_by_quntl <- function(df){
df %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
return(list(vars_q_1, vars_q_2, vars_q_3, vars_q_4))
}
foo <- function(plot){
p <- ggplot_build(plot)
p$data[[1]] <-   p$data[[1]] %>%
mutate(diff = abs(x-round(x)), x = case_when(group %% 2 == 0 ~ round(x) + diff,
TRUE ~ round(x) - diff)) %>%    select(-diff)
return(
(ggplot_gtable(p))
)
}
colours <- c(alpha(c( "dodgerblue2"), .1), alpha(c("darkorange"), 1))
plot_split_violins <- function(data, quntl_num, legend.position){
data %>% get_vars_by_quntl -> vars_by_quntl
p <- data %>%  select(c(vars_by_quntl[[quntl_num]], "Group")) %>%  pivot_longer(-Group)  %>%
ggplot(aes(name,value,color= Group))+
geom_quasirandom(size= c(0.2)) + #scale_fill_manual(values = colours, name = "") +
theme_minimal()+
guides(color = guide_legend(override.aes = list(size = 4, alpha = 1) ))+
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
axis.title.y = element_blank(), legend.position=legend.position)+scale_color_discrete(name="")+
scale_colour_manual(values = colours, name = "")
return(foo(p) %>% as_ggplot)  }
library(ggpubr)
d_subplot <-plot_split_violins(data, 1 , 'none')
c_subplot <-plot_split_violins(data, 2 , 'none')
b_subplot <-plot_split_violins(data, 3 , 'none')
a_subplot <-plot_split_violins(data, 4 , 'top')
left_swarms <- ggarrange(b_subplot, c_subplot, d_subplot, ncol = 1, labels = c("b", "c", "d"), hjust = 1)
ggarrange(a_subplot, left_swarms,  ncol = 2, widths = c(.8, 1), labels = c("a")) -> my_panel
my_panel
data %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(data, "./metabolites_data/metabolites_outliers_imputed.parquet.gzip" ,  compression = "gzip")
data %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data
