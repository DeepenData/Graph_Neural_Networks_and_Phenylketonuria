check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>%  dplyr::select(-c(Phe)) %>% mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
impute_data_with_mixgb <- function(df){
for_mixgb <- data_clean(df)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20, pmm.k = 10, initial.num = 'median')
imputed_data <-imputed.data[[1]] %>% as.data.frame()
return(imputed_data)}
remove_outliers_patients(healthy_numeric, .25, .75)         -> healthy_outliers_removed
print(paste('remaining healthy patients: ', nrow(healthy_outliers_removed)))
impute_data_with_mixgb(healthy_outliers_removed)  -> healthy_outliers_inputation_done
#healthy_outliers_inputation_done %>% plot_swarm_panel(.01, .1)
remove_outliers_patients(PKU_numeric, 0.1, .9)         -> PKU_outliers_removed
print(paste('remaining PKUs: ', nrow(PKU_outliers_removed)))
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
#PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
healthy_numeric
df1_pku
healthy_outliers_inputation_done
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
setwd("/DeepenData/Repos/geometric_cobra")
df1              <-read_csv("./metabolite_raw_data/raw_data_to_extract_controls.csv")
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","Tyr", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < Tyr)) %>%
filter( (35 <= Phe) & (Phe <= 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
setwd("/DeepenData/Repos/geometric_cobra")
df1_pku <-  read_excel('./metabolite_raw_data/raw_data_to_extract_PKUs.xlsx') %>% dplyr::select(-c("...1"))
df1_pku %>%  filter(edad_diagnostico_dias<=31)%>%
mutate(`Fecha.entrega.informe` = as.Date(`Fecha.entrega.informe`,"%d-%m-%Y"))%>%
mutate(`Fecha.Nacimiento` = as.Date(`Fecha.Nacimiento`,"%d-%m-%Y"))  %>%
filter(360 <= Phe)  %>%
filter(`Fecha.entrega.informe` > '2009-01-01')-> PKU
to_drop <- c("Paciente_PKU", "COMUNA", "REGION", "Condicion", "RUT", "Fecha.entrega.informe", "Fecha.Nacimiento", "estudio.molecular",
"Ciudad", "Sexo", "edad_diagnostico_dias", "FADIAG..mg.por.dL.",    "TIRDIAG.mg_por_dL","razon_FADIAG_TIRDIAG" ,"TDIAG")
PKU_numeric <- PKU %>% select(-c(to_drop)) %>% select_if(is_double)
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
library(mixgb)
library(readxl)
setwd("/DeepenData/Repos/geometric_cobra")
df1              <-read_csv("./metabolite_raw_data/raw_data_to_extract_controls.csv")
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","Tyr", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < Tyr)) %>%
filter( (35 <= Phe) & (Phe <= 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
setwd("/DeepenData/Repos/geometric_cobra")
df1_pku <-  read_excel('./metabolite_raw_data/raw_data_to_extract_PKUs.xlsx') %>% dplyr::select(-c("...1"))
df1_pku %>%  filter(edad_diagnostico_dias<=31)%>%
mutate(`Fecha.entrega.informe` = as.Date(`Fecha.entrega.informe`,"%d-%m-%Y"))%>%
mutate(`Fecha.Nacimiento` = as.Date(`Fecha.Nacimiento`,"%d-%m-%Y"))  %>%
filter(360 <= Phe)  %>%
filter(`Fecha.entrega.informe` > '2009-01-01')-> PKU
to_drop <- c("Paciente_PKU", "COMUNA", "REGION", "Condicion", "RUT", "Fecha.entrega.informe", "Fecha.Nacimiento", "estudio.molecular",
"Ciudad", "Sexo", "edad_diagnostico_dias", "FADIAG..mg.por.dL.",    "TIRDIAG.mg_por_dL","razon_FADIAG_TIRDIAG" ,"TDIAG")
PKU_numeric <- PKU %>% select(-c(to_drop)) %>% select_if(is_double)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>%  dplyr::select(-c(Phe)) %>% mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
impute_data_with_mixgb <- function(df){
for_mixgb <- data_clean(df)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20, pmm.k = 10, initial.num = 'median')
imputed_data <-imputed.data[[1]] %>% as.data.frame()
return(imputed_data)}
remove_outliers_patients(healthy_numeric, .25, .75)         -> healthy_outliers_removed
print(paste('remaining healthy patients: ', nrow(healthy_outliers_removed)))
impute_data_with_mixgb(healthy_outliers_removed)  -> healthy_outliers_inputation_done
#healthy_outliers_inputation_done %>% plot_swarm_panel(.01, .1)
remove_outliers_patients(PKU_numeric, 0.1, .9)         -> PKU_outliers_removed
print(paste('remaining PKUs: ', nrow(PKU_outliers_removed)))
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
#PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
names(PKU_outliers_inputation_done)
names(healthy_outliers_inputation_done)
df1
setwd("/DeepenData/Repos/geometric_cobra")
df1              <-read_csv("./metabolite_raw_data/raw_data_to_extract_controls.csv") %>% dplyr::select(!starts_with('...'))
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","Tyr", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < Tyr)) %>%
filter( (35 <= Phe) & (Phe <= 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
df1
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
library(mixgb)
library(readxl)
setwd("/DeepenData/Repos/geometric_cobra")
df1              <-read_csv("./metabolite_raw_data/raw_data_to_extract_controls.csv") %>% dplyr::select(!starts_with('...'))
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","Tyr", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < Tyr)) %>%
filter( (35 <= Phe) & (Phe <= 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
setwd("/DeepenData/Repos/geometric_cobra")
df1_pku <-  read_excel('./metabolite_raw_data/raw_data_to_extract_PKUs.xlsx') %>% dplyr::select(-c("...1"))
df1_pku %>%  filter(edad_diagnostico_dias<=31)%>%
mutate(`Fecha.entrega.informe` = as.Date(`Fecha.entrega.informe`,"%d-%m-%Y"))%>%
mutate(`Fecha.Nacimiento` = as.Date(`Fecha.Nacimiento`,"%d-%m-%Y"))  %>%
filter(360 <= Phe)  %>%
filter(`Fecha.entrega.informe` > '2009-01-01')-> PKU
to_drop <- c("Paciente_PKU", "COMUNA", "REGION", "Condicion", "RUT", "Fecha.entrega.informe", "Fecha.Nacimiento", "estudio.molecular",
"Ciudad", "Sexo", "edad_diagnostico_dias", "FADIAG..mg.por.dL.",    "TIRDIAG.mg_por_dL","razon_FADIAG_TIRDIAG" ,"TDIAG")
PKU_numeric <- PKU %>% select(-c(to_drop)) %>% select_if(is_double)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>%  dplyr::select(-c(Phe)) %>% mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
impute_data_with_mixgb <- function(df){
for_mixgb <- data_clean(df)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20, pmm.k = 10, initial.num = 'median')
imputed_data <-imputed.data[[1]] %>% as.data.frame()
return(imputed_data)}
remove_outliers_patients(healthy_numeric, .25, .75)         -> healthy_outliers_removed
print(paste('remaining healthy patients: ', nrow(healthy_outliers_removed)))
impute_data_with_mixgb(healthy_outliers_removed)  -> healthy_outliers_inputation_done
#healthy_outliers_inputation_done %>% plot_swarm_panel(.01, .1)
remove_outliers_patients(PKU_numeric, 0.1, .9)         -> PKU_outliers_removed
print(paste('remaining PKUs: ', nrow(PKU_outliers_removed)))
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
#PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
data <- rbind(PKU_outliers_inputation_done, healthy_outliers_inputation_done)
data
data %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(data, "./processed_data/metabolites_outliers_removed_and_imputed.parquet.gzip" ,  compression = "gzip")
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
library(mixgb)
library(readxl)
setwd("/DeepenData/Repos/geometric_cobra")
df1              <-read_csv("./metabolite_raw_data/raw_data_to_extract_controls.csv") %>% dplyr::select(!starts_with('...'))
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","Tyr", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < Tyr)) %>%
filter( (35 <= Phe) & (Phe <= 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
setwd("/DeepenData/Repos/geometric_cobra")
df1_pku <-  read_excel('./metabolite_raw_data/raw_data_to_extract_PKUs.xlsx') %>% dplyr::select(-c("...1"))
df1_pku %>%  filter(edad_diagnostico_dias<=31)%>%
mutate(`Fecha.entrega.informe` = as.Date(`Fecha.entrega.informe`,"%d-%m-%Y"))%>%
mutate(`Fecha.Nacimiento` = as.Date(`Fecha.Nacimiento`,"%d-%m-%Y"))  %>%
filter(360 <= Phe)  %>%
filter(`Fecha.entrega.informe` > '2009-01-01')-> PKU
to_drop <- c("Paciente_PKU", "COMUNA", "REGION", "Condicion", "RUT", "Fecha.entrega.informe", "Fecha.Nacimiento", "estudio.molecular",
"Ciudad", "Sexo", "edad_diagnostico_dias", "FADIAG..mg.por.dL.",    "TIRDIAG.mg_por_dL","razon_FADIAG_TIRDIAG" ,"TDIAG")
PKU_numeric <- PKU %>% select(-c(to_drop)) %>% select_if(is_double)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>%  dplyr::select(-c(Phe)) %>% mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
impute_data_with_mixgb <- function(df){
for_mixgb <- data_clean(df)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20, pmm.k = 10, initial.num = 'median')
imputed_data <-imputed.data[[1]] %>% as.data.frame()
return(imputed_data)}
remove_outliers_patients(healthy_numeric, .25, .75)         -> healthy_outliers_removed
print(paste('remaining healthy patients: ', nrow(healthy_outliers_removed)))
impute_data_with_mixgb(healthy_outliers_removed)  -> healthy_outliers_inputation_done
#healthy_outliers_inputation_done %>% plot_swarm_panel(.01, .1)
remove_outliers_patients(PKU_numeric, 0.1, .9)         -> PKU_outliers_removed
print(paste('remaining PKUs: ', nrow(PKU_outliers_removed)))
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
#PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
data <- rbind(PKU_outliers_inputation_done, healthy_outliers_inputation_done)
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(data, "./processed_data/metabolites_outliers_removed_and_imputed.parquet.gzip" ,  compression = "gzip")
library(arrow)
library(tidyverse)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
library(readxl)
data <- read_excel("Supplementary_table_1_Hub_gene_and_differential_hub_gene_list_with_functional_annotation.xlsx", sheet = 2)
data$initial_alias -> genes
library(arrow)
library(tidyverse)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
library(readxl)
data <- read_excel("Supplementary_table_1_Hub_gene_and_differential_hub_gene_list_with_functional_annotation.xlsx", sheet = 2)
data$initial_alias -> genes
x <- enrichPathway(gene          = genes,
#organism = "hsa",
# ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
#universe      = names(geneList),
minGSSize     = 1,
maxGSSize     = 1000,
qvalueCutoff  = 0.01)
x@result
x <- enrichDO(gene          = genes,
#organism = "hsa",
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
#universe      = names(geneList),
minGSSize     = 1,
maxGSSize     = 1000,
qvalueCutoff  = 0.01)
x@result
x <- enrichDGN(gene          = genes,
#organism = "hsa",
#ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
#universe      = names(geneList),
minGSSize     = 1,
maxGSSize     = 1000,
qvalueCutoff  = 0.01)
x@result
library(arrow)
library(tidyverse)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
library(readxl)
data <- read_excel("Supplementary_table_1_Hub_gene_and_differential_hub_gene_list_with_functional_annotation.xlsx", sheet = 2)
data$initial_alias -> genes
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
searchAttributes(mart = Hs.ensembl, pattern = "kegg")
searchAttributes(mart = Hs.ensembl, pattern = "KEGG")
searchAttributes(mart = Hs.ensembl, pattern = "entrez|hgnc")
searchAttributes(mart = Hs.ensembl, pattern = "entrez|GO")
searchAttributes(mart = Hs.ensembl, pattern = "KeGG|GO")
searchAttributes(mart = Hs.ensembl, pattern = "anno|term")
searchAttributes(mart = Hs.ensembl, pattern = "GO|term")
searchAttributes(mart = Hs.ensembl, pattern = "GO|GO")
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description', 'namespace_1003'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description', 'definition_1006'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description','name_1006', 'definition_1006'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description','namespace_1003','name_1006', 'definition_1006'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
searchAttributes(mart = Hs.ensembl, pattern = "GO|biological_process")
searchAttributes(mart = Hs.ensembl, pattern = "biological_process")
temp %>% dplyr::filter(namespace_1003 == "biological_process")
temp %>% dplyr::filter(namespace_1003 == "biological_process") -> df
df
df %>% nest_by(hgnc_symbol)
df
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol)
?nest_by
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.character())
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.character(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = unlist(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) #%>% mutate(data = unlist(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) -> df2#%>% mutate(data = unlist(data))
df2
df2$data
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest(hgnc_symbol) -> df2#%>% mutate(data = unlist(data))
df2$data
df2$data[[1]]
df2
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) -> df2#%>% mutate(data = unlist(data))
df2$data[[1]]
df2
df2$data[[1]]
df2
df2$data[[1]]
df2$data[[1]][[1]]
as.vector(df2$data[[1]])
as.character(df2$data[[1]])
as.string(df2$data[[1]])
as.array(df2$data[[1]])
as_vector(df2$data[[1]])
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) -%>% mutate(data = as_vector(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as_vector(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data))
as.vector(df2$data[[1]])
unlist(as.vector(df2$data[[1]]))
pluck(as.vector(df2$data[[1]]))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data)[[1]])
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data))
as.character(as.vector(df2$data[[1]]))
as.vector(as.vector(df2$data[[1]]))
purrr::as_vector(as.vector(df2$data[[1]]))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as_vector(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data))
purrr::unlist(as.vector(df2$data[[1]]))
(as.vector(df2$data[[1]]))
c(as.vector(df2$data[[1]]))
flatten(as.vector(df2$data[[1]]))
flatten(flatten(df2$data[[1]]))
flatten(df2$data[[1]])
flatten_chr(df2$data[[1]])
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = flatten_chr(data))
flatten_chr(df2$data[[1]])
paste0(flatten_chr(df2$data[[1]]))
paste(flatten_chr(df2$data[[1]]))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = purrr::flatten_chr(data))
c(flatten_chr(df2$data[[1]]))
paste0(flatten_chr(df2$data[[1]]), collapse = ', ')
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '- '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; '))
df
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>% rename(data = bio)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>% rename('Biological process' = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>% rename(BP = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename(BP = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename('BP' = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename('Biological Process' = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
write_csv(df_annot, "all_hubs_BP_annotated.csv")
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
write_csv(df_annot, "all_hubs_BP_annotated.csv")
df
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(c(hgnc_symbol, entrezgene_description)) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(c(hgnc_symbol)) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by((hgnc_symbol)) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(hgnc_symbol, entrezgene_description) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, entrezgene_id, name_1006)) %>% nest_by(hgnc_symbol, entrezgene_description, entrezgene_id) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, entrezgene_id, name_1006)) %>% nest_by(hgnc_symbol, entrezgene_description, entrezgene_id) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Processes' = data) -> df_annot
df_annot
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
write_csv(df_annot, "all_hubs_BP_annotated.csv")
setwd("/DeepenData/Repos/geometric_cobra")
library(magrittr)
library(tidyverse)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>% # dplyr::select(-c(Phe)) %>%
mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
setwd("/DeepenData/Repos/geometric_cobra")
flux_samples_CONTROL_10_000 <- arrow::read_parquet("./results/fluxes/flux_samples_CONTROL_10_000.parquet.gzip") %>% remove_outliers_patients(0.02, .98)
flux_samples_PKU_10_000 <- arrow::read_parquet("./results/fluxes/flux_samples_PKU_10_000.parquet.gzip")%>% remove_outliers_patients(0.02, .98)
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(flux_samples_CONTROL_10_000, "./results/fluxes/CLEANED_flux_samples_CONTROL_10_000.parquet.gzip" ,compression = "gzip")
arrow::write_parquet(flux_samples_PKU_10_000, "./results/fluxes/CLEANED_flux_samples_PKU_10_000.parquet.gzip",     compression = "gzip")
library(magrittr)
library(tidyverse)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>% # dplyr::select(-c(Phe)) %>%
mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
setwd("/DeepenData/Repos/geometric_cobra")
flux_samples_CONTROL_10_000 <- arrow::read_parquet("./results/fluxes/flux_samples_CONTROL_10_000.parquet.gzip") %>% remove_outliers_patients(0.05, .95)
flux_samples_PKU_10_000 <- arrow::read_parquet("./results/fluxes/flux_samples_PKU_10_000.parquet.gzip")%>% remove_outliers_patients(0.05, .95)
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(flux_samples_CONTROL_10_000, "./results/fluxes/CLEANED_flux_samples_CONTROL_10_000.parquet.gzip" ,compression = "gzip")
arrow::write_parquet(flux_samples_PKU_10_000, "./results/fluxes/CLEANED_flux_samples_PKU_10_000.parquet.gzip",     compression = "gzip")
