print(paste('remaining PKUs: ', nrow(PKU_outliers_removed)))
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
#PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
data <- rbind(PKU_outliers_inputation_done, healthy_outliers_inputation_done)
data
data %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(data, "./processed_data/metabolites_outliers_removed_and_imputed.parquet.gzip" ,  compression = "gzip")
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
library(mixgb)
library(readxl)
setwd("/DeepenData/Repos/geometric_cobra")
df1              <-read_csv("./metabolite_raw_data/raw_data_to_extract_controls.csv") %>% dplyr::select(!starts_with('...'))
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","Tyr", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < Tyr)) %>%
filter( (35 <= Phe) & (Phe <= 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
setwd("/DeepenData/Repos/geometric_cobra")
df1_pku <-  read_excel('./metabolite_raw_data/raw_data_to_extract_PKUs.xlsx') %>% dplyr::select(-c("...1"))
df1_pku %>%  filter(edad_diagnostico_dias<=31)%>%
mutate(`Fecha.entrega.informe` = as.Date(`Fecha.entrega.informe`,"%d-%m-%Y"))%>%
mutate(`Fecha.Nacimiento` = as.Date(`Fecha.Nacimiento`,"%d-%m-%Y"))  %>%
filter(360 <= Phe)  %>%
filter(`Fecha.entrega.informe` > '2009-01-01')-> PKU
to_drop <- c("Paciente_PKU", "COMUNA", "REGION", "Condicion", "RUT", "Fecha.entrega.informe", "Fecha.Nacimiento", "estudio.molecular",
"Ciudad", "Sexo", "edad_diagnostico_dias", "FADIAG..mg.por.dL.",    "TIRDIAG.mg_por_dL","razon_FADIAG_TIRDIAG" ,"TDIAG")
PKU_numeric <- PKU %>% select(-c(to_drop)) %>% select_if(is_double)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>%  dplyr::select(-c(Phe)) %>% mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
impute_data_with_mixgb <- function(df){
for_mixgb <- data_clean(df)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20, pmm.k = 10, initial.num = 'median')
imputed_data <-imputed.data[[1]] %>% as.data.frame()
return(imputed_data)}
remove_outliers_patients(healthy_numeric, .25, .75)         -> healthy_outliers_removed
print(paste('remaining healthy patients: ', nrow(healthy_outliers_removed)))
impute_data_with_mixgb(healthy_outliers_removed)  -> healthy_outliers_inputation_done
#healthy_outliers_inputation_done %>% plot_swarm_panel(.01, .1)
remove_outliers_patients(PKU_numeric, 0.1, .9)         -> PKU_outliers_removed
print(paste('remaining PKUs: ', nrow(PKU_outliers_removed)))
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
#PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
data <- rbind(PKU_outliers_inputation_done, healthy_outliers_inputation_done)
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(data, "./processed_data/metabolites_outliers_removed_and_imputed.parquet.gzip" ,  compression = "gzip")
library(arrow)
library(tidyverse)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
library(readxl)
data <- read_excel("Supplementary_table_1_Hub_gene_and_differential_hub_gene_list_with_functional_annotation.xlsx", sheet = 2)
data$initial_alias -> genes
library(arrow)
library(tidyverse)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
library(readxl)
data <- read_excel("Supplementary_table_1_Hub_gene_and_differential_hub_gene_list_with_functional_annotation.xlsx", sheet = 2)
data$initial_alias -> genes
x <- enrichPathway(gene          = genes,
#organism = "hsa",
# ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
#universe      = names(geneList),
minGSSize     = 1,
maxGSSize     = 1000,
qvalueCutoff  = 0.01)
x@result
x <- enrichDO(gene          = genes,
#organism = "hsa",
ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
#universe      = names(geneList),
minGSSize     = 1,
maxGSSize     = 1000,
qvalueCutoff  = 0.01)
x@result
x <- enrichDGN(gene          = genes,
#organism = "hsa",
#ont           = "DO",
pvalueCutoff  = 0.05,
pAdjustMethod = "BH",
#universe      = names(geneList),
minGSSize     = 1,
maxGSSize     = 1000,
qvalueCutoff  = 0.01)
x@result
library(arrow)
library(tidyverse)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
library(readxl)
data <- read_excel("Supplementary_table_1_Hub_gene_and_differential_hub_gene_list_with_functional_annotation.xlsx", sheet = 2)
data$initial_alias -> genes
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
searchAttributes(mart = Hs.ensembl, pattern = "kegg")
searchAttributes(mart = Hs.ensembl, pattern = "KEGG")
searchAttributes(mart = Hs.ensembl, pattern = "entrez|hgnc")
searchAttributes(mart = Hs.ensembl, pattern = "entrez|GO")
searchAttributes(mart = Hs.ensembl, pattern = "KeGG|GO")
searchAttributes(mart = Hs.ensembl, pattern = "anno|term")
searchAttributes(mart = Hs.ensembl, pattern = "GO|term")
searchAttributes(mart = Hs.ensembl, pattern = "GO|GO")
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description', 'namespace_1003'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description', 'definition_1006'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description','name_1006', 'definition_1006'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description','namespace_1003','name_1006', 'definition_1006'),filters ='entrezgene_id',values =genes, mart = Hs.ensembl)
temp
searchAttributes(mart = Hs.ensembl, pattern = "GO|biological_process")
searchAttributes(mart = Hs.ensembl, pattern = "biological_process")
temp %>% dplyr::filter(namespace_1003 == "biological_process")
temp %>% dplyr::filter(namespace_1003 == "biological_process") -> df
df
df %>% nest_by(hgnc_symbol)
df
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol)
?nest_by
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.character())
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.character(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = unlist(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) #%>% mutate(data = unlist(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) -> df2#%>% mutate(data = unlist(data))
df2
df2$data
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest(hgnc_symbol) -> df2#%>% mutate(data = unlist(data))
df2$data
df2$data[[1]]
df2
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) -> df2#%>% mutate(data = unlist(data))
df2$data[[1]]
df2
df2$data[[1]]
df2
df2$data[[1]]
df2$data[[1]][[1]]
as.vector(df2$data[[1]])
as.character(df2$data[[1]])
as.string(df2$data[[1]])
as.array(df2$data[[1]])
as_vector(df2$data[[1]])
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) -%>% mutate(data = as_vector(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as_vector(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data))
as.vector(df2$data[[1]])
unlist(as.vector(df2$data[[1]]))
pluck(as.vector(df2$data[[1]]))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data)[[1]])
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data))
as.character(as.vector(df2$data[[1]]))
as.vector(as.vector(df2$data[[1]]))
purrr::as_vector(as.vector(df2$data[[1]]))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as_vector(data))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = as.vector(data))
purrr::unlist(as.vector(df2$data[[1]]))
(as.vector(df2$data[[1]]))
c(as.vector(df2$data[[1]]))
flatten(as.vector(df2$data[[1]]))
flatten(flatten(df2$data[[1]]))
flatten(df2$data[[1]])
flatten_chr(df2$data[[1]])
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = flatten_chr(data))
flatten_chr(df2$data[[1]])
paste0(flatten_chr(df2$data[[1]]))
paste(flatten_chr(df2$data[[1]]))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data = purrr::flatten_chr(data))
c(flatten_chr(df2$data[[1]]))
paste0(flatten_chr(df2$data[[1]]), collapse = ', ')
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '- '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; '))
df
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>% rename(data = bio)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>% rename('Biological process' = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>% rename(BP = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; '))
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename(BP = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename('BP' = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename('Biological Process' = data)
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = '; ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
write_csv(df_annot, "all_hubs_BP_annotated.csv")
df %>% dplyr::select(c(hgnc_symbol, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
write_csv(df_annot, "all_hubs_BP_annotated.csv")
df
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(c(hgnc_symbol, entrezgene_description)) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(c(hgnc_symbol)) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by((hgnc_symbol)) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(hgnc_symbol) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, name_1006)) %>% nest_by(hgnc_symbol, entrezgene_description) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, entrezgene_id, name_1006)) %>% nest_by(hgnc_symbol, entrezgene_description, entrezgene_id) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Process' = data) -> df_annot
df_annot
df %>% dplyr::select(c(hgnc_symbol, entrezgene_description, entrezgene_id, name_1006)) %>% nest_by(hgnc_symbol, entrezgene_description, entrezgene_id) %>% mutate(data =paste0( purrr::flatten_chr(data) , collapse = ', ')) %>%dplyr::rename('Biological Processes' = data) -> df_annot
df_annot
setwd("/DeepenData/Repos/Neuron-Astrocyte-Metabolism-2023")
write_csv(df_annot, "all_hubs_BP_annotated.csv")
library(arrow)
library(tidyverse)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
Mm.ensembl <- useMart("ensembl",dataset="mmusculus_gene_ensembl")
searchAttributes(mart = Mm.ensembl, pattern = "hsa")
searchAttributes(mart = Hs.ensembl, pattern = "descri")
setwd("/DeepenData/Repos/geometric_cobra/deprecated")
res <- readRDS("./MM/RNA_results.RDS")
res %>% rownames() -> all_ENSMUST
#c('ENSMUST00000228829','ENSMUST00000228611','ENSMUST00000096990') -> transcripts
temp_1 <- getBM(attributes=c('ensembl_transcript_id','hsapiens_homolog_ensembl_gene'),filters ='ensembl_transcript_id',values =all_ENSMUST, mart = Mm.ensembl)
colnames(temp_1)<-c("mouse_ensembl_transcript_id", "hsapiens_ensembl")
#searchAttributes(mart = Hs.ensembl, pattern = "entrez")
temp_2 <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol','entrezgene_id','entrezgene_description'),
filters ='ensembl_gene_id',values = temp_1$hsapiens_ensembl, mart = Hs.ensembl)
colnames(temp_2) <- c("hsapiens_ensembl", "hgnc_symbol", "entrezgene_id", 'description')
inner_join(temp_1, temp_2) -> all_gene_codes
res['mouse_ensembl_transcript_id'] <- rownames(res)
inner_join(as.data.frame(res) ,all_gene_codes ) %>% drop_na() %>% arrange(hgnc_symbol) -> annotated_results
setwd("/DeepenData/Repos/geometric_cobra/deprecated")
gs_C  <- read.csv2("./results/dataframes/entrez_IDs_C.csv")[,1]  %>% as.character #%>% entrez_to_gene
gs_F  <- read.csv2("./results/dataframes/entrez_IDs_F.csv")[,1]  %>% as.character #%>% entrez_to_gene
gs_CF <- read.csv2("./results/dataframes/entrez_IDs_CF.csv")[,1] %>% as.character #%>% entrez_to_gene
library(EnhancedVolcano)
library(magrittr)
get_processed_results <- function(annotated_results, subset){
annotated_results %>% dplyr::filter(entrezgene_id %in% subset) %>% dplyr::select(-c(mouse_ensembl_transcript_id,hsapiens_ensembl,entrezgene_id, description)) %>%
group_by(hgnc_symbol) %>% summarise_all(median,  na.rm = TRUE) ->processed_results
return(processed_results)
}
get_processed_results(annotated_results, gs_C) -> Concentration
get_processed_results(annotated_results, gs_F) -> Flux
get_processed_results(annotated_results, gs_CF) -> C_and_F
pValue_cutoff     = 0.05
FoldChnage_cutoff = .1
df_res <- Flux # Concentration, Flux, C_and_F
plot <- EnhancedVolcano(
df_res,
x = 'log2FoldChange',
y = 'padj',
title = NULL,
subtitle = NULL,#paste0( names( conjuntos )[[i]], " - ", length( unique(conjuntos[[i]][ conjuntos[[i]] %in% df_res$gene_symbol_sig ]) ), " trancripts" ),
pCutoff = pValue_cutoff,
FCcutoff = FoldChnage_cutoff,
pointSize = 1,
lab = df_res$hgnc_symbol,
labSize = 2,
boxedLabels = F,
drawConnectors = TRUE,
widthConnectors = 0.2,
colConnectors = 'black',
max.overlaps = 100, #Inf,
) + ggthemes::theme_few() +
# coord_flip() +
theme(legend.position="bottom")
plot
DEGs_table <- function(case){
case %>% dplyr::filter(padj < pValue_cutoff & abs(log2FoldChange) > FoldChnage_cutoff) %>% dplyr::select(c(hgnc_symbol, log2FoldChange, padj)) -> significant_genes
return(
inner_join(annotated_results[c("hgnc_symbol", "description")] %>% unique(), significant_genes) %>% arrange(log2FoldChange))
}
DEGs_table(Concentration)
DEGs_table(Flux)
DEGs_table(C_and_F)
setwd("/DeepenData")
setwd("/DeepenData/Repos/geometric_cobra")
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
setwd("/DeepenData/Repos/geometric_cobra")
metabolites_outliers_imputed           <- arrow::read_parquet("./processed_data/augmented_balanced_metabolite_data.parquet.gzip") %>% as_tibble()%>% mutate(Group = as.factor(Group))  %>%
rename("C4OH+C3DC" = C4OH.C3DC, "C5.OH+C4DC" = C5.OH.C4DC, "Leu+Ile" = Leu.Ile)
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
setwd("/DeepenData/Repos/geometric_cobra")
metabolites_outliers_imputed           <- arrow::read_parquet("./processed_data/augmented_balanced_metabolite_data.parquet.gzip") %>% as_tibble()%>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control'))
mutate(Group = as.factor(Group))  %>%
rename("C4OH+C3DC" = C4OH.C3DC, "C5.OH+C4DC" = C5.OH.C4DC, "Leu+Ile" = Leu.Ile)
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
setwd("/DeepenData/Repos/geometric_cobra")
metabolites_outliers_imputed           <- arrow::read_parquet("./processed_data/augmented_balanced_metabolite_data.parquet.gzip") %>% as_tibble()%>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>%
mutate(Group = as.factor(Group))  %>%
rename("C4OH+C3DC" = C4OH.C3DC, "C5.OH+C4DC" = C5.OH.C4DC, "Leu+Ile" = Leu.Ile)
table(
metabolites_outliers_imputed$Group
)
color_1 <- "dodgerblue2"
color_2 <- "darkorange"
get_concentration_subplot <- function(input_df, vars_subset, logscale =F, legend.position = 'none', y_label = F, angle = 45, swarm_width = .15, dodge.width = 1, point_size = .9, size_ticks_size = 9, axis_title_size = 12, gray = F){
Control_df <-  input_df %>% dplyr::filter(Group == "Control")  %>%  dplyr::slice_sample(n=200)
PKU_df <-  input_df %>% dplyr::filter(Group == "PKU")
subsample <- rbind(PKU_df, Control_df)
subsample %>% dplyr::select(c(vars_subset, 'Group')) %>% pivot_longer(-Group) -> df
df %>%                                 ggplot(aes(x= reorder(name, -value), y=value, color=Group)) -> P0
if(gray){P0 <- P0  + theme_gray() }else{ P0 <- P0  + theme_minimal()}
P0 + geom_boxplot(width = .15, outlier.shape = NA)    +
geom_point(position=position_quasirandom(dodge.width = dodge.width, width = swarm_width), alpha = .8, size =point_size) +
scale_colour_manual(values = c(color_1 ,color_2))  +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = angle, vjust = 0, hjust=.5),axis.text = element_text(size = size_ticks_size),axis.title = element_text(size = axis_title_size),
legend.position=legend.position,
legend.text = element_text(size=7))-> p
if(logscale){p <-p  + coord_trans( y="log2")}
if(y_label){p <-p   + ylab(expression(mu*"M"))}else{p <-p   +theme(axis.title.y = element_blank())}
return(p )
}
metabolites_outliers_imputed     %>%
summarise(across(where(is.double),  ~ max(.x, na.rm = TRUE))) %>%
t %>% as.data.frame() %>% arrange(desc(V1)) %>% rownames() -> sorted_vars
setdiff(sorted_vars, c("Phe")) -> v
vars_intervals <- list()
j = 0
for (i in seq(from = 1, to = 44, by = 11)){
j = j +1
vars_intervals[[j]] <-v[i:(i+10)]
if( (i+7) > 44 ){ vars_intervals[[j]] <-v[i:(44)]}
}
#vars_intervals[[5]] <- c(vars_intervals[[5]], vars_intervals[[6]])
# vars_intervals[[6]] <- NULL
get_concentration_subplot(metabolites_outliers_imputed, 'Phe', T, 'top',  y_label = T,  angle=0, gray = T) -> p
p + geom_hline(yintercept=c(35,120, 360), linetype="dashed",
color = c("black","black","red"), size=.51)+ scale_y_continuous(breaks=c(35,120,360, 1000, 2300)) +
theme(legend.title=element_blank()) -> Phe_
Phe_  + stat_compare_means(label = "p.signif", method = 'wilcox.test') -> Phe_
#Phe_subplot <- ggarrange(Phe_ , labels = 'a' )
Phe_
color_1 <- "dodgerblue2"
color_2 <- "red4"
get_concentration_subplot <- function(input_df, vars_subset, logscale =F, legend.position = 'none', y_label = F, angle = 45, swarm_width = .15, dodge.width = 1, point_size = .9, size_ticks_size = 9, axis_title_size = 12, gray = F){
Control_df <-  input_df %>% dplyr::filter(Group == "Control")  %>%  dplyr::slice_sample(n=200)
PKU_df <-  input_df %>% dplyr::filter(Group == "PKU")
subsample <- rbind(PKU_df, Control_df)
subsample %>% dplyr::select(c(vars_subset, 'Group')) %>% pivot_longer(-Group) -> df
df %>%                                 ggplot(aes(x= reorder(name, -value), y=value, color=Group)) -> P0
if(gray){P0 <- P0  + theme_gray() }else{ P0 <- P0  + theme_minimal()}
P0 + geom_boxplot(width = .15, outlier.shape = NA)    +
geom_point(position=position_quasirandom(dodge.width = dodge.width, width = swarm_width), alpha = .8, size =point_size) +
scale_colour_manual(values = c(color_1 ,color_2))  +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = angle, vjust = 0, hjust=.5),axis.text = element_text(size = size_ticks_size),axis.title = element_text(size = axis_title_size),
legend.position=legend.position,
legend.text = element_text(size=7))-> p
if(logscale){p <-p  + coord_trans( y="log2")}
if(y_label){p <-p   + ylab(expression(mu*"M"))}else{p <-p   +theme(axis.title.y = element_blank())}
return(p )
}
metabolites_outliers_imputed     %>%
summarise(across(where(is.double),  ~ max(.x, na.rm = TRUE))) %>%
t %>% as.data.frame() %>% arrange(desc(V1)) %>% rownames() -> sorted_vars
setdiff(sorted_vars, c("Phe")) -> v
vars_intervals <- list()
j = 0
for (i in seq(from = 1, to = 44, by = 11)){
j = j +1
vars_intervals[[j]] <-v[i:(i+10)]
if( (i+7) > 44 ){ vars_intervals[[j]] <-v[i:(44)]}
}
#vars_intervals[[5]] <- c(vars_intervals[[5]], vars_intervals[[6]])
# vars_intervals[[6]] <- NULL
get_concentration_subplot(metabolites_outliers_imputed, 'Phe', T, 'top',  y_label = T,  angle=0, gray = T) -> p
p + geom_hline(yintercept=c(35,120, 360), linetype="dashed",
color = c("black","black","red"), size=.51)+ scale_y_continuous(breaks=c(35,120,360, 1000, 2300)) +
theme(legend.title=element_blank()) -> Phe_
Phe_  + stat_compare_means(label = "p.signif", method = 'wilcox.test') -> Phe_
#Phe_subplot <- ggarrange(Phe_ , labels = 'a' )
Phe_
get_concentration_subplot(metabolites_outliers_imputed, 'Tyr', T, 'top',  y_label = F,  angle=0, gray = T) -> p
p + # geom_hline(yintercept=c(20,50, 150), linetype="dashed",                 color = c("azure4","azure4","azure4"), size=.51)+
scale_y_continuous(breaks=c(20,50,150)) +
theme(legend.title=element_blank()) -> Tyr_
Tyr_  + stat_compare_means(label = "p.signif", method = 'wilcox.test') -> Tyr_
ggarrange(Phe_, Tyr_, common.legend = T, widths = c(1.06,1),labels = 'a' ) -> Phe_subplot
Phe_subplot
color_1 <- "dodgerblue2"
color_2 <- "red4"
get_concentration_subplot <- function(input_df, vars_subset, logscale =F, legend.position = 'none', y_label = F, angle = 45, swarm_width = .15, dodge.width = 1, point_size = .9, size_ticks_size = 9, axis_title_size = 12, gray = F){
Control_df <-  input_df %>% dplyr::filter(Group == "Control")  %>%  dplyr::slice_sample(n=200)
PKU_df <-  input_df %>% dplyr::filter(Group == "PKU")
subsample <- rbind(PKU_df, Control_df)
subsample %>% dplyr::select(c(vars_subset, 'Group')) %>% pivot_longer(-Group) -> df
df %>%                                 ggplot(aes(x= reorder(name, -value), y=value, color=Group)) -> P0
if(gray){P0 <- P0  + theme_gray() }else{ P0 <- P0  + theme_minimal()}
P0 + geom_boxplot(width = .15, outlier.shape = NA)    +
geom_point(position=position_quasirandom(dodge.width = dodge.width, width = swarm_width), alpha = .8, size =point_size) +
scale_colour_manual(values = c(color_1 ,color_2))  +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = angle, vjust = 0, hjust=.5),axis.text = element_text(size = size_ticks_size),axis.title = element_text(size = axis_title_size),
legend.position=legend.position,
legend.text = element_text(size=7))-> p
if(logscale){p <-p  + coord_trans( y="log2")}
if(y_label){p <-p   + ylab(expression(mu*"M"))}else{p <-p   +theme(axis.title.y = element_blank())}
return(p )
}
metabolites_outliers_imputed     %>%
summarise(across(where(is.double),  ~ max(.x, na.rm = TRUE))) %>%
t %>% as.data.frame() %>% arrange(desc(V1)) %>% rownames() -> sorted_vars
setdiff(sorted_vars, c("Phe")) -> v
vars_intervals <- list()
j = 0
for (i in seq(from = 1, to = 44, by = 11)){
j = j +1
vars_intervals[[j]] <-v[i:(i+10)]
if( (i+7) > 44 ){ vars_intervals[[j]] <-v[i:(44)]}
}
#vars_intervals[[5]] <- c(vars_intervals[[5]], vars_intervals[[6]])
# vars_intervals[[6]] <- NULL
get_concentration_subplot(metabolites_outliers_imputed, 'Phe', T, 'top',  y_label = T,  angle=0, gray = T) -> p
p + geom_hline(yintercept=c(35,120, 360), linetype="dashed",
color = c("black","black","red"), size=.51)+ scale_y_continuous(breaks=c(35,120,360, 1000, 2300)) +
theme(legend.title=element_blank()) -> Phe_
Phe_  + stat_compare_means(label = "p.signif", method = 'wilcox.test') -> Phe_
#Phe_subplot <- ggarrange(Phe_ , labels = 'a' )
subplot_1 <- get_concentration_subplot(metabolites_outliers_imputed, vars_intervals[[1]][1:3], angle=0,  y_label = T, swarm_width = .08, dodge.width = .82, point_size = .1, size_ticks_size = 5, axis_title_size= 8) + stat_compare_means(label = "p.signif", method = 'wilcox.test', vjust = 1.5)
subplot_2 <- get_concentration_subplot(metabolites_outliers_imputed,vars_intervals[[1]][c(4,5,6,8,9)], angle=0, swarm_width = .1, dodge.width = .82, point_size = .1, size_ticks_size = 5, axis_title_size = 8)+ stat_compare_means(label = "p.signif", method = 'wilcox.test', vjust = 1.5) + ylim(c(0,250))
subplot_b <- ggarrange(subplot_1, subplot_2,  nrow = 1, widths = c(1,1.6), labels = 'b', hjust = 0)
subplot_1 <- get_concentration_subplot(metabolites_outliers_imputed, c(vars_intervals[[1]][10:11], vars_intervals[[2]][1:3]), angle=0,  y_label = T, swarm_width = .08, dodge.width = .82, point_size = .1, size_ticks_size = 5, axis_title_size= 8)+ stat_compare_means(label="p.signif",method='wilcox.test', vjust = 1.5)
#subplot_2 <- get_concentration_subplot(metabolites_outliers_imputed,vars_intervals[[2]][1:3], angle=0, swarm_width = .1, dodge.width = .82, point_size = .2, size_ticks_size = 7, axis_title_size= 8)
subplot_3 <- get_concentration_subplot(metabolites_outliers_imputed,vars_intervals[[2]][4:5], angle=0, swarm_width = .1, dodge.width = .82, point_size = .1, size_ticks_size = 5, axis_title_size= 8)+ stat_compare_means(label = "p.signif", method = 'wilcox.test', vjust = 1.5)
subplot_4 <- get_concentration_subplot(metabolites_outliers_imputed,vars_intervals[[2]][6:7], angle=0, swarm_width = .1, dodge.width = .82, point_size = .1, size_ticks_size = 5, axis_title_size= 8)+ stat_compare_means(label = "p.signif", method = 'wilcox.test', vjust = 1.5)
subplot_c <- ggarrange(subplot_1, subplot_3, subplot_4,nrow = 1, widths = c(3,1,1), labels = 'c', hjust = 0)
subplot_c
subplot_1 <- get_concentration_subplot(metabolites_outliers_imputed, vars_intervals[[2]][8:9], angle=0,  y_label = T, swarm_width = .08, dodge.width = .82, point_size = .1, size_ticks_size = 5, axis_title_size= 8)+ stat_compare_means(label="p.signif",method='wilcox.test', vjust = 1.5)
subplot_2 <- get_concentration_subplot(metabolites_outliers_imputed,c(vars_intervals[[2]][10:11], vars_intervals[[3]][1:3], vars_intervals[[3]][4:6]), angle=0, swarm_width = .1, dodge.width = .82, point_size = .2, size_ticks_size = 5, axis_title_size= 8)+ stat_compare_means(label="p.signif",method='wilcox.test', vjust = 1.5)
#subplot_3 <- get_concentration_subplot(metabolites_outliers_imputed,vars_intervals[[3]][1:3], angle=0, swarm_width = .1, dodge.width = .82, point_size = .2, size_ticks_size = 7, axis_title_size= 8)
subplot_4 <- get_concentration_subplot(metabolites_outliers_imputed,vars_intervals[[3]][4:6], angle=0, swarm_width = .1, dodge.width = .82, point_size = .1, size_ticks_size = 5, axis_title_size= 8)+ stat_compare_means(label="p.signif",method='wilcox.test')
subplot_d <- ggarrange(subplot_1, subplot_2,nrow = 1, widths = c(1,3), labels = 'd', hjust = 0)
subplot_d
ggarrange(Phe_, Tyr_, common.legend = T, widths = c(1.06,1),labels = c("a","b") ) -> Phe_subplot
Phe_subplot
