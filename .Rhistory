filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
#healthy$Condicion <- "Control"
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
#healthy_numeric$Glt[
#which.max(healthy_numeric$Glt)] <- NA
#%>%as.data.frame() %>% ggplot(aes(x=V1)) + geom_histogram()
check_in <- function(a_row){
return("out" %in% a_row) }
find_out_occurences <- function(df){
return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())
}
df <- data.frame(x = 1:5, y = 3:7, z = c(.01, .2,.4,1, 3e5))
df[2,2] <- NA
df[4,1] <- NA
df[2,1] <- NA
df
outliers_to_str <- function(a_col){
Q1 <- quantile(a_col, 0.20, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, 0.80, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
#mask <- (a_col < lower_bound) & (a_col > upper_bound)
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)
}
df%>% mutate_all(outliers_to_str)  %>% find_out_occurences  -> out_ocurrences
df[!out_ocurrences,]
healthy_numeric%>% mutate_all(outliers_to_str)  %>% find_out_occurences  -> out_ocurrences
healthy_numeric[!out_ocurrences,] -> healthy_dropped_patients
library(ggbeeswarm)
plot_swarm <- function(df){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=.1, alpha = 0.05) -> my_plot
return(my_plot)
}
healthy_dropped_patients %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
healthy_dropped_patients[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
healthy_dropped_patients[vars_q_2] %>% plot_swarm -> vars_q_2_PLOT
healthy_dropped_patients[vars_q_3] %>% plot_swarm -> vars_q_3_PLOT
healthy_dropped_patients[vars_q_4] %>% plot_swarm -> vars_q_4_PLOT
#a_col%>%as.data.frame() %>% ggplot(aes(x= . )) + geom_histogram()
library(ggpubr)
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
my_panel
healthy_dropped_patients
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed.data
imputed.data[[1]]%>% plot_swarm
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed.data[[1]]%>% plot_swarm
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed.data[[1]] %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed.data[[1]][vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
vars_mean
imputed.data[1][vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed.data[1]
imputed.data[1][vars_q_1]
vars_q_1
imputed.data[[1]]
vars_q_1
imputed.data[1]
imputed.data[1][vars_q_1]
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
imputed_data <-imputed.data[[1]]
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed_data[vars_q_1]
imputed_data
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed_data[vars_q_2] %>% plot_swarm -> vars_q_2_PLOT
imputed_data[vars_q_3] %>% plot_swarm -> vars_q_3_PLOT
imputed_data[vars_q_4] %>% plot_swarm -> vars_q_4_PLOT
#a_col%>%as.data.frame() %>% ggplot(aes(x= . )) + geom_histogram()
library(ggpubr)
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
my_panel
library(mixgb)
for_mixgb <- data_clean(healthy_dropped_patients)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20)
imputed_data <-imputed.data[[1]] %>% as.data.frame()
imputed_data %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
imputed_data[vars_q_1] %>% plot_swarm -> vars_q_1_PLOT
imputed_data[vars_q_2] %>% plot_swarm -> vars_q_2_PLOT
imputed_data[vars_q_3] %>% plot_swarm -> vars_q_3_PLOT
imputed_data[vars_q_4] %>% plot_swarm -> vars_q_4_PLOT
#a_col%>%as.data.frame() %>% ggplot(aes(x= . )) + geom_histogram()
library(ggpubr)
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
my_panel
imputed_data
imputed_data %>% is.nan()
imputed_data
imputed_data %>% is.na()
imputed_data %>% is.na() %>% sum
imputed_data %>% is.na() %>% colSums()
imputed_data %>% is.na() %>% colSums()
dim(imputed_data)
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
setwd("/DeepenData/Repos/geometric_cobra")
#metabolite_data        <- read_csv("./metabolites_data/metabolite_data.csv")
subsys_fluxes_non_zero <- arrow::read_parquet("./results/flux/subsys_fluxes_non_zero.parquet.gzip")
metabolite_data        <- arrow::read_parquet("./metabolites_data/metabolites_outliers_imputed.parquet.gzip")
get_vars_by_quntl <- function(df){
df %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
return(list(vars_q_1, vars_q_2, vars_q_3, vars_q_4))
}
foo <- function(plot){
p <- ggplot_build(plot)
p$data[[1]] <-   p$data[[1]] %>%
mutate(diff = abs(x-round(x)), x = case_when(group %% 2 == 0 ~ round(x) + diff,
TRUE ~ round(x) - diff)) %>%    select(-diff)
return(
(ggplot_gtable(p))
)
}
plot_split_violins <- function(data, quntl_num,vars_by_quntl ,legend.position, logscale, alpha, size_marker){
colours <- c(alpha(c( "dodgerblue2"), alpha), alpha(c("darkorange"), 1))
#data %>% get_vars_by_quntl -> vars_by_quntl
p <- data %>%  select(c(vars_by_quntl[[quntl_num]], "Group")) %>%  pivot_longer(-Group)  %>%
ggplot(aes(name,value,color= Group))+
geom_quasirandom(size= size_marker) + #scale_fill_manual(values = colours, name = "") +
theme_minimal()+
guides(color = guide_legend(override.aes = list(size = 4, alpha = 1) ))+
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
axis.title.y = element_blank(), legend.position=legend.position)+scale_color_discrete(name="")+
scale_colour_manual(values = colours, name = "")
if(logscale){p <-p  + coord_trans( y="log2") }
return(foo(p) %>% as_ggplot)  }
metabolite_data %>% dplyr::select(-c('Phe')) %>% get_vars_by_quntl -> vars_by_quntl
vars_by_quntl[[5]] <- c('Phe')
a_subplot <-plot_split_violins(metabolite_data, 5 , vars_by_quntl, 'top', TRUE, .1, .6)
b_subplot <- plot_split_violins(metabolite_data, 4 , vars_by_quntl, 'none', F, .02, .01)
c_subplot <- plot_split_violins(metabolite_data, 3 , vars_by_quntl, 'none', F, .02, .01)
d_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
e_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
right_swarms <- ggarrange(b_subplot, c_subplot, d_subplot, e_subplot, ncol = 1, labels = c("b","c","d","e"), vjust = 1.1, hjust = .5)
ggarrange(a_subplot, right_swarms, widths = c(.5, 1), labels = c("a",""), vjust = 1.1) -> swarm_panel
make_umap <- function(data){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap -> umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%  sample_n(1000) %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap-> umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%  sample_n(1000) %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap-> umap_plot_2
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap-> umap_plot_2
umap_plot_1
make_umap <- function(data){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap -> umap_plot_1
umap_plot_1
ggarrange(umap_plot_1, umap_plot_2)
make_umap <- function(data, legend.position){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(legend.position=legend.position, text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap('none') -> umap_plot_1
umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap('right')-> umap_plot_2
ggarrange(umap_plot_1, umap_plot_2)
ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
setwd("/DeepenData/Repos/geometric_cobra")
img <- png::readPNG("./results/figures/RECON_graph.png")
graph <- ggplot() + background_image(img)
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
setwd("/DeepenData/Repos/geometric_cobra")
img <- png::readPNG("./results/figures/RECON_graph.png")
graph <- ggplot() + background_image(img)
subsys_fluxes_non_zero
metabolite_data
vars_by_quntl
subsys_fluxes_non_zero %>% names
flux_names[[1]] <- subsys_fluxes_non_zero %>% names
flux_names <- list()
flux_names[[1]] <- subsys_fluxes_non_zero %>% names
flux_names
flux_names <- list()
flux_names[[1]] <- subsys_fluxes_non_zero %>% names
a_subplot <-plot_split_violins(subsys_fluxes_non_zero, 1 , flux_names, 'top', TRUE, .1, .6)
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
subsys_fluxes_non_zero %>% plot_swarm
subsys_fluxes_non_zero %>% plot_swarm(1,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(1,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.4,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.2)
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-7,7))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
subsys_fluxes_non_zero
colSums(subsys_fluxes_non_zero)
colSums(subsys_fluxes_non_zero) < .1
colSums(subsys_fluxes_non_zero) > .1
subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero) > .1]
subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero) > 1]
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero) > 1] %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,6))
p + ylim(c(0,6)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.5)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + xlab('Reaction')
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab('Reaction')+ ylab('Flux')
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal()
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal()
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
setwd("/DeepenData/Repos/geometric_cobra")
library(arrow)
library(tidyverse)
library(ComplexHeatmap)
library(scales)
library(ggpubr)
library(ggplot2)
library(DOSE)
library(magrittr)
library(biomaRt)
library(tidyverse)
library(clusterProfiler)
library(ReactomePA)
library(org.Hs.eg.db)
library(fastcluster)
setwd("/DeepenData/Repos/geometric_cobra")
df     <-  read_csv("./results/dataframes/to_R_heatmap_explanatory_subgraph_MASKED_GCN_Fluxes.csv") %>% dplyr::select(-c("...1")) #to_R_heatmap_explanatory_subgraph_masked_NONflux.csv #to_R_heatmap_explanatory_subgraph_masked_FLUX.csv
labels <- read_csv("./results/dataframes/labels_masked_only_Fluxes.csv")  %>%  dplyr::select(-c("...1")) %>% .[[1]] #test_labels_masked_NONflux.csv  #test_labels_masked_FLUX.csv
edge_weights_x_patients <- df%>%  dplyr::select_if(is.numeric)
edges_genes   <- df%>%  dplyr::select_if(is.character)
n_edges <- nrow(edges_genes)
n_patients <- length(labels)
edges_mask    <- sample(c(T,F), n_edges, replace = T, prob = c(1, 0))
patients_mask <- sample(c(T,F), n_patients, replace = T, prob = c(.5, 0.5))
edge_weights_x_patients_SAMPLE <- edge_weights_x_patients[edges_mask,patients_mask]
labels_SAMPLE <- labels[patients_mask]
edges_genes_SAMPLE <- edges_genes[edges_mask,]
processed_data <- edge_weights_x_patients_SAMPLE %>% as.matrix() %>% rescale
dim(processed_data)
#view(edges_genes)
labels_SAMPLE
rowSums(processed_data) %>% as.vector() -> edge_scores
right_annotation <- rowAnnotation( gp = gpar(fontsize = 2), Group = labels_SAMPLE,
col = list(fontsize = 2, Group = c(
'Control'        = "darkgreen",
'PKU'           =  "gold")))
top_annotation <- columnAnnotation(`TS` = anno_lines( pch = 26, size = unit(5, "mm"), gp = gpar(col = 'red4'),
edge_scores, height = unit(1.5, "cm")))
bottom_annotation <- HeatmapAnnotation(foo = anno_block(labels = c("C1", "C2", "C3"),labels_gp = gpar(col = "darkslategray", fontsize = 9),
gp = gpar(fill = c("azure2","azure2","azure2","azure2"))))
#densityHeatmap(t(processed_data),  ylim = c(0.02, 0.5),  ylab = "some values", show_quantiles = F, mc.cores =20, cores = 20,
#               cluster_columns = TRUE,  clustering_distance_columns  =  function(x) fastcluster::hclust(dist(x), "euclidean"))  %v%
ht <- Heatmap(t(processed_data),
clustering_distance_columns  =  function(x) fastcluster::hclust(dist(x), "cosine"),
cluster_columns              =  function(x) fastcluster::hclust(dist(x), "centroid"),
clustering_distance_rows  =  function(x) fastcluster::hclust(dist(x), "cosine"),
cluster_rows              =  function(x) fastcluster::hclust(dist(x), "centroid"),
name = "Edge weight",
border = TRUE,
row_km = 2,
column_km = 3,
row_gap = unit(2, "mm"),
column_gap = unit(2, "mm"),
width = unit(14.5, "cm"),
height = unit(4.5, "cm"),
show_column_names = F,
show_row_names = F,
column_title = c( "Explanatory subgraph edges"),
column_title_gp = gpar(fontsize = 11),
row_title = c("Samples (patients)"),
row_title_gp = gpar(fontsize = 11),
row_dend_width    = unit(1.5, "cm"),
column_dend_height = unit(1.5,"cm"),
top_annotation = top_annotation,
right_annotation = right_annotation,
bottom_annotation = bottom_annotation, heatmap_legend_param = list(direction = "horizontal"))
heatmap_clusters <- waRRior::heatmap_extract_cluster(draw(ht), t(processed_data),  which = "column")
heatmap_clusters %>% count(Cluster, sort = TRUE) %>% .[['Cluster']] -> clusters_descending_sorted
clusters_descending_sorted[1:length(clusters_descending_sorted)] -> real_clusters
get_entrez_IDs_cluster <- function(a_cluster) {
edges_clusters   <-  heatmap_clusters[['Cluster']]
cluster_mask     <- edges_clusters ==a_cluster
genes_list       <- edges_genes_SAMPLE$genes[cluster_mask] %>% str_extract_all('\\d+(?=\\.)')
entrez_IDs       <- genes_list%>% unlist() %>% unique()
return(entrez_IDs)}
clusters <- unique(heatmap_clusters[['Cluster']])
lapply(clusters, get_entrez_IDs_cluster) %>% purrr::set_names(clusters) %>% .[real_clusters]  -> clusters_list # %>% purrr::set_names(c("C1", "C3", "C4")) -> clusters_list
ensembl    <- useMart("ensembl")
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
genes_symbols <- list()
get_functional_annots <- function(entrez_IDs, transporters){
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description'),filters ='entrezgene_id',values =entrez_IDs, mart = Hs.ensembl)
if(transporters){
temp %<>% filter(str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter', ignore_case = T)))
}
else {  temp %<>% filter(!str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter', ignore_case = T))) }
return(arrange(temp, hgnc_symbol) %>% purrr::set_names(c("Symbol", "Entrez ID", "Description")))}
#%>% as_tibble() %>% nest(name_1006= name_1006) %>% mutate(name_1006 = name_1006) -> nested_df
transporters <- purrr::map2(clusters_list, c(T,T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F,F), get_functional_annots)
purrr::map2(reactions, c("Entrez ID","Entrez ID","Entrez ID"), pull) %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-2, qvalueCutoff=1e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6)) -> enrichKEGG_reactions
purrr::map2(reactions, c("Entrez ID","Entrez ID","Entrez ID"), pull) %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))-> enrichDGN_reactions
purrr::map2(transporters, c("Entrez ID","Entrez ID","Entrez ID"), pull) %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-2, qvalueCutoff=1e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =50)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6)) -> enrichKEGG_transporters
purrr::map2(transporters, c("Entrez ID","Entrez ID","Entrez ID"), pull) %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =40)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))-> enrichDGN_transporters
