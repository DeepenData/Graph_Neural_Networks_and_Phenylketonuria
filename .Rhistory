genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
get_gene_cluster(Cluster_genes_concentration, 2)
purrr::map2(c(Cluster_genes_concentration, Cluster_genes_concentration), c(1,2))
purrr::map2(c(Cluster_genes_concentration, Cluster_genes_concentration), c(1,2), get_gene_cluster)
Cluster_genes_concentration
purrr::map2(c(Cluster_genes_concentration, Cluster_genes_concentration), c(1,2), get_gene_cluster)
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
list(
"ss" = get_gene_cluster(Cluster_genes_concentration, 1),
"dd" = get_gene_cluster(Cluster_genes_concentration, 2)
)
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
list(
"1" = get_gene_cluster(Cluster_genes_concentration, 1),
"2" = get_gene_cluster(Cluster_genes_concentration, 2)
)
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
concentration <- list(
"1" = get_gene_cluster(Cluster_genes_concentration, 1),
"2" = get_gene_cluster(Cluster_genes_concentration, 2)
)
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
get_clusters_list <- function(df){
clusters_list <- list(
"1" = get_gene_cluster(df, 1),
"2" = get_gene_cluster(df, 2)
return(clusters_list)
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
get_clusters_list <- function(df){
clusters_list <- list(
"1" = get_gene_cluster(df, 1),
"2" = get_gene_cluster(df, 2))
return(clusters_list)
)}
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
get_clusters_list <- function(df){
clusters_list <- list(
"1" = get_gene_cluster(df, 1),
"2" = get_gene_cluster(df, 2))
return(clusters_list)
}
get_clusters_list(Cluster_genes_concentration)
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
get_clusters_list <- function(df){
clusters_list <- list(
"1" = get_gene_cluster(df, 1),
"2" = get_gene_cluster(df, 2))
return(clusters_list)
}
get_clusters_list(Cluster_genes_concentration)
get_clusters_list(Cluster_genes_flux)
get_clusters_list(Cluster_genes_concentration_plus_flux)
get_gene_cluster<- function(df, a_cluster){
genes <-  df %>%  dplyr::filter(Cluster == a_cluster)   %>%  .[['genes']]  %>% str_extract_all('\\d+(?=\\.)') %>% unlist() %>% unique()
return(genes
)}
get_clusters_list <- function(df){
clusters_list <- list(
"1" = get_gene_cluster(df, 1),
"2" = get_gene_cluster(df, 2))
return(clusters_list)
}
get_clusters_list(Cluster_genes_concentration)           -> concentration
get_clusters_list(Cluster_genes_flux)                    -> flux
get_clusters_list(Cluster_genes_concentration_plus_flux) -> concentration_plus_flux
ensembl    <- useMart("ensembl")
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
genes_symbols <- list()
get_functional_annots <- function(entrez_IDs, transporters){
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description'),filters ='entrezgene_id',values =entrez_IDs, mart = Hs.ensembl)
if(transporters){
temp %<>% filter(str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter', ignore_case = T)))
}
else {  temp %<>% filter(!str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter', ignore_case = T))) }
return(arrange(temp, hgnc_symbol) %>% purrr::set_names(c("Symbol", "Entrez ID", "Description")))}
#%>% as_tibble() %>% nest(name_1006= name_1006) %>% mutate(name_1006 = name_1006) -> nested_df
transporters <- purrr::map2(concentration, c(T,T), get_functional_annots)
reactions    <- purrr::map2(concentration, c(F,F), get_functional_annots)
transporters
reactions
ensembl    <- useMart("ensembl")
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
genes_symbols <- list()
get_functional_annots <- function(entrez_IDs, transporters){
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description'),filters ='entrezgene_id',values =entrez_IDs, mart = Hs.ensembl)
if(transporters){
temp %<>% filter(str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter|aquapor|transport', ignore_case = T)))
}
else {  temp %<>% filter(!str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter|aquapor|transport', ignore_case = T))) }
return(arrange(temp, hgnc_symbol) %>% purrr::set_names(c("Symbol", "Entrez ID", "Description")))}
#%>% as_tibble() %>% nest(name_1006= name_1006) %>% mutate(name_1006 = name_1006) -> nested_df
transporters <- purrr::map2(concentration, c(T,T), get_functional_annots)
reactions    <- purrr::map2(concentration, c(F,F), get_functional_annots)
transporters
reactions
ensembl    <- useMart("ensembl")
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
genes_symbols <- list()
get_functional_annots <- function(entrez_IDs, transporters){
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description'),filters ='entrezgene_id',values =entrez_IDs, mart = Hs.ensembl)
if(transporters){
temp %<>% filter(str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter|aquapor|transport', ignore_case = T)))
}
else {  temp %<>% filter(!str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter|aquapor|transport', ignore_case = T))) }
return(arrange(temp, hgnc_symbol) %>% purrr::set_names(c("Symbol", "Entrez ID", "Description")))}
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
}
get_transporters_and_reactions(concentration)
ensembl    <- useMart("ensembl")
Hs.ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
genes_symbols <- list()
get_functional_annots <- function(entrez_IDs, transporters){
temp <- getBM(attributes=c('hgnc_symbol',"entrezgene_id", 'entrezgene_description'),filters ='entrezgene_id',values =entrez_IDs, mart = Hs.ensembl)
if(transporters){
temp %<>% filter(str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter|aquapor|transport', ignore_case = T)))
}
else {  temp %<>% filter(!str_detect(entrezgene_description,regex( '(solute.+?carrier)|transporter|aquapor|transport', ignore_case = T))) }
return(arrange(temp, hgnc_symbol) %>% purrr::set_names(c("Symbol", "Entrez ID", "Description")))}
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
return(list(reactions,transporters))
}
get_transporters_and_reactions(concentration) -> transporters_and_reactions
transporters_and_reactions
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
return(list('reactions'=reactions,'transporters'=transporters))
}
get_transporters_and_reactions(concentration) -> transporters_and_reactions
transporters_and_reactions
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
return(list('reactions'=reactions[1],'transporters'=transporters))
}
get_transporters_and_reactions(concentration) -> transporters_and_reactions
transporters_and_reactions
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
return(list('reactions'=reactions,'transporters'=transporters))
}
get_transporters_and_reactions(concentration) -> transporters_and_reactions
transporters_and_reactions
transporters_and_reactions[1]
purrr::map2(transporters_and_reactions$reactions, c("Entrez ID","Entrez ID"), pull)
purrr::map2(transporters_and_reactions$transporters, c("Entrez ID","Entrez ID"), pull)
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
transporters_and_reactions <- list('reactions'=reactions,'transporters'=transporters)
return()
}
purrr::map2(transporters_and_reactions$reactions, c("Entrez ID","Entrez ID"), pull) -> reaction_genes
purrr::map2(transporters_and_reactions$transporters, c("Entrez ID","Entrez ID"), pull) -> transporter_genes
reaction_genes
list("reaction_genes"= reaction_genes)
transporters_and_reactions
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
transporters_and_reactions <- list('reactions'=reactions,'transporters'=transporters)
purrr::map2(transporters_and_reactions$reactions, c("Entrez ID","Entrez ID"), pull) -> reaction_genes
purrr::map2(transporters_and_reactions$transporters, c("Entrez ID","Entrez ID"), pull) -> transporter_genes
return(list("reaction_genes"= reaction_genes,  'transporter_genes'=transporter_genes))
}
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
transporters_and_reactions <- list('reactions'=reactions,'transporters'=transporters)
purrr::map2(transporters_and_reactions$reactions, c("Entrez ID","Entrez ID"), pull) -> reaction_genes
purrr::map2(transporters_and_reactions$transporters, c("Entrez ID","Entrez ID"), pull) -> transporter_genes
return(list("reaction_genes"= reaction_genes,  'transporter_genes'=transporter_genes))
}
get_transporters_and_reactions(concentration)
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
transporters_and_reactions <- list('reactions'=reactions,'transporters'=transporters)
purrr::map2(transporters_and_reactions$reactions, c("Entrez ID","Entrez ID"), pull) -> reaction_genes
purrr::map2(transporters_and_reactions$transporters, c("Entrez ID","Entrez ID"), pull) -> transporter_genes
return(list( reaction_genes,  'transporter_genes'=transporter_genes))
}
get_transporters_and_reactions(concentration)
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
transporters_and_reactions <- list('reactions'=reactions,'transporters'=transporters)
purrr::map2(transporters_and_reactions$reactions, c("Entrez ID","Entrez ID"), pull) -> reaction_genes
purrr::map2(transporters_and_reactions$transporters, c("Entrez ID","Entrez ID"), pull) -> transporter_genes
return(list("reactions"= reaction_genes,  'transporters'=transporter_genes))
}
get_transporters_and_reactions(concentration)
get_transporters_and_reactions <- function(clusters_list){
transporters <- purrr::map2(clusters_list, c(T,T), get_functional_annots)
reactions    <- purrr::map2(clusters_list, c(F,F), get_functional_annots)
transporters_and_reactions <- list('reactions'=reactions,'transporters'=transporters)
purrr::map2(transporters_and_reactions$reactions, c("Entrez ID","Entrez ID"), pull) -> reaction_genes
purrr::map2(transporters_and_reactions$transporters, c("Entrez ID","Entrez ID"), pull) -> transporter_genes
return(list("reactions"= reaction_genes,  'transporters'=transporter_genes))
}
get_transporters_and_reactions(concentration) -> transporters_and_reactions_concentration
transporters_and_reactions_concentration$reactions
transporters_and_reactions_concentration$reactions %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-2, qvalueCutoff=1e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
get_transporters_and_reactions(concentration) -> transporters_and_reactions_concentration
get_transporters_and_reactions(flux) -> transporters_and_reactions_flux
get_transporters_and_reactions(concentration_plus_flux) -> transporters_and_reactions_concentration_plus_flux
transporters_and_reactions_concentration$reactions %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-2, qvalueCutoff=1e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration$transporters %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-2, qvalueCutoff=1e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration$transporters %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-3, qvalueCutoff=1e-3)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration$transporters %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-5, qvalueCutoff=1e-5)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration$transporters %>%
compareCluster(fun='enrichKEGG', pvalueCutoff=1e-5, qvalueCutoff=1e-5)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration$transporters %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-5, qvalueCutoff=1e-5)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration$reactions %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration$transporters %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_flux$reactions %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-2, qvalueCutoff=1e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_flux$transporters %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-5, qvalueCutoff=1e-5)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_flux$reactions %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-3, qvalueCutoff=1e-3)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_flux$reactions %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_flux$transporters %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration_plus_flux$reactions %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-3, qvalueCutoff=1e-3)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration_plus_flux$reactions %>%
compareCluster(fun='enrichPathway', pvalueCutoff=5e-2, qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration_plus_flux$transporters %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-5, qvalueCutoff=1e-5)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration_plus_flux$transporters %>%
compareCluster(fun='enrichPathway', pvalueCutoff=1e-2, qvalueCutoff=1e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 5, label_format =90)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration_plus_flux$reactions %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration_plus_flux$transporters %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 5, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration_plus_flux$transporters %>% compareCluster(fun='enrichDGN', pvalueCutoff=5e-2,  qvalueCutoff=5e-2)-> enrich_output
enrich_output %>% dotplot(showCategory = 10, font.size = 6, label_format =80)+
theme(
legend.text=element_text(size=6),
legend.position = "bottom",
#legend.box = "vertical",
text = element_text(size=6))
transporters_and_reactions_concentration
transporters_and_reactions_concentration %>% unlist
transporters_and_reactions_concentration %>% unlist %>% as.vector()
transporters_and_reactions_flux %>% unlist %>% as.vector()
transporters_and_reactions_concentration %>% unlist %>% as.vector()
transporters_and_reactions_flux %>% unlist %>% as.vector()
transporters_and_reactions_concentration_plus_flux%>% unlist %>% as.vector()
transporters_and_reactions_flux %>% unlist %>% as.vector()
transporters_and_reactions_concentration %>% unlist %>% as.vector()
transporters_and_reactions_flux %>% unlist %>% as.vector()
transporters_and_reactions_concentration_plus_flux%>% unlist %>% as.vector()
transporters_and_reactions_concentration %>% unlist %>% as.vector() %>% data.frame()
transporters_and_reactions_concentration %>% unlist %>% as.vector() %>% data.frame("kk"= .)
transporters_and_reactions_concentration %>% unlist %>% as.vector() %>% data.frame("C"= .)
transporters_and_reactions_flux %>% unlist %>% as.vector()  %>% data.frame("F"= .)
transporters_and_reactions_concentration_plus_flux%>% unlist %>% as.vector() %>% data.frame("CF"= .)
transporters_and_reactions_concentration %>% unlist %>% as.vector() %>% data.frame("C"= .) %>% write_csv("./results/dataframes/entrez_IDs_C.csv")
setwd("/DeepenData/Repos/geometric_cobra")
transporters_and_reactions_concentration %>% unlist %>% as.vector() %>% data.frame("C"= .) %>% write_csv("./results/dataframes/entrez_IDs_C.csv")
transporters_and_reactions_flux %>% unlist %>% as.vector()  %>% data.frame("F"= .) %>% write_csv("./results/dataframes/entrez_IDs_F.csv")
transporters_and_reactions_concentration_plus_flux%>% unlist %>% as.vector() %>% data.frame("CF"= .)  %>% write_csv("./results/dataframes/entrez_IDs_CF.csv")
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
library(mixgb)
library(readxl)
setwd("/DeepenData/Repos/geometric_cobra")
df1 <-read_csv2("./metabolites_data/Base_de_datos_2010_2020_columnas_limpias.csv")
vars_to_drop_NAs <- c("Fecha entrega informe","Fecha de nacimiento","Phe","tir", "Edad (días calculados)")
df1 %>% drop_na(any_of(vars_to_drop_NAs))  %>%
filter( (0 < tir)) %>%
filter( (35 <= Phe) & (Phe <= 120))  %>%
filter(`Edad (días calculados)` <= 31) %>%
select(-c("FDIAG")) %>%
mutate(`Fecha entrega informe` = as.Date(`Fecha entrega informe`,"%d-%m-%Y"))  %>%
mutate(`Fecha de nacimiento` = as.Date(`Fecha de nacimiento`,"%d-%m-%Y")) %>%
filter(`Fecha entrega informe` > '2009-01-01')-> healthy
to_drop <- c( "RUT","Fecha entrega informe", "Fecha de nacimiento",    "estudio molecular",      "Ciudad",                 "Sexo" ,
"Edad (días calculados)", "FADIAG (mg por dL)",     "TIRDIAG mg_por_DL" ,     "razon_FADIAG_TIRDIAG" ,  "COMUNA",
"REGION"         ,        "TDIAG")
healthy_numeric <- healthy %>% select(-c(to_drop)) %>% select_if(is_double)
setwd("/DeepenData/Repos/geometric_cobra")
df1_pku_old <-  read_excel('./metabolites_data/Datos_Primera_Medición_PKU.xlsx')
df1_pku <- read_excel('./metabolites_data/Cursedest_DB_PKU.xlsx') %>% dplyr::select(-c("...1"))
all(names(df1_pku_old) == names( df1_pku))
#vars_to_drop_NAs <- c("Fecha.entrega.informe","edad_diagnostico_dias","Phe")
df1_pku %>%  filter(edad_diagnostico_dias<=31)%>%
mutate(`Fecha.entrega.informe` = as.Date(`Fecha.entrega.informe`,"%d-%m-%Y"))%>%
mutate(`Fecha.Nacimiento` = as.Date(`Fecha.Nacimiento`,"%d-%m-%Y"))  %>%
filter(360 <= Phe)  %>%
filter(`Fecha.entrega.informe` > '2009-01-01')-> PKU
to_drop <- c("Paciente_PKU", "COMUNA", "REGION", "Condicion", "RUT", "Fecha.entrega.informe", "Fecha.Nacimiento", "estudio.molecular",
"Ciudad", "Sexo", "edad_diagnostico_dias", "FADIAG..mg.por.dL.",    "TIRDIAG.mg_por_dL","razon_FADIAG_TIRDIAG" ,"TDIAG")
PKU_numeric <- PKU %>% select(-c(to_drop)) %>% select_if(is_double)
check_in            <- function(a_row){return("out" %in% a_row) }
find_out_occurences <- function(df){return(sapply(as.list(as.data.frame(t(df))), check_in) %>% as.vector())}
outliers_to_str     <- function(a_col, first_qutl, second_qutl){
Q1 <- quantile(a_col, first_qutl, names = FALSE, na.rm =T)
Q3 <- quantile(a_col, second_qutl, names = FALSE, na.rm =T)
INTER <- Q3 - Q1
lower_bound <- Q1 - 1.5*INTER
upper_bound <- Q3 + 1.5*INTER
a_col[a_col < lower_bound | a_col > upper_bound] <- "out"
return(a_col)}
remove_outliers_patients <- function(df, first_qutl, second_qutl){
df  %>%  dplyr::select(-c(Phe)) %>% mutate_all(outliers_to_str, first_qutl, second_qutl)  %>%
find_out_occurences  -> out_ocurrences
return(df[!out_ocurrences,])}
impute_data_with_mixgb <- function(df){
for_mixgb <- data_clean(df)
names(for_mixgb) <- make.names(colnames(for_mixgb))
imputed.data <- mixgb(data = for_mixgb, m = 1, nthread = 20, pmm.k = 10, initial.num = 'median')
imputed_data <-imputed.data[[1]] %>% as.data.frame()
return(imputed_data)}
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
plot_swarm_panel <- function(dropped_patients_done, size, alpha){
dropped_patients_done %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[                          q_75 <= vars_mean ,] %>% names
dropped_patients_done[vars_q_1] %>% plot_swarm(size, alpha) -> vars_q_1_PLOT
dropped_patients_done[vars_q_2] %>% plot_swarm(size, alpha)  -> vars_q_2_PLOT
dropped_patients_done[vars_q_3] %>% plot_swarm(size, alpha)  -> vars_q_3_PLOT
dropped_patients_done[vars_q_4] %>% plot_swarm(size, alpha)  -> vars_q_4_PLOT
ggarrange(vars_q_1_PLOT, vars_q_2_PLOT, vars_q_3_PLOT, vars_q_4_PLOT,
ncol = 1) -> my_panel
return(my_panel)}
remove_outliers_patients(healthy_numeric, .25, .75)         -> healthy_outliers_removed
impute_data_with_mixgb(healthy_outliers_removed)  -> healthy_outliers_inputation_done
healthy_outliers_inputation_done %>% plot_swarm_panel(.01, .1)
remove_outliers_patients(PKU_numeric, 0.1, .9)         -> PKU_outliers_removed
print(nrow(PKU_outliers_removed))
impute_data_with_mixgb(PKU_outliers_removed)  -> PKU_outliers_inputation_done
PKU_outliers_inputation_done %>% plot_swarm_panel(.5, .7)
healthy_outliers_inputation_done['Group'] = "Control"
PKU_outliers_inputation_done['Group']      = "PKU"
assertthat::assert_that(all(names(PKU_outliers_inputation_done) == names(healthy_outliers_inputation_done)))
data <- rbind(PKU_outliers_inputation_done, healthy_outliers_inputation_done)
data %>%
data.table::setnames(old = c("tir","Glt"),new = c('Tyr','Glu'))
setwd("/DeepenData/Repos/geometric_cobra")
arrow::write_parquet(data, "./metabolites_data/metabolites_outliers_imputed.parquet.gzip" ,  compression = "gzip")
setwd("/DeepenData/Repos/geometric_cobra")
setwd("/DeepenData/Repos/geometric_cobra")
all_flux_samples <-  arrow::read_parquet("./results/dataframes/fluxes/all_flux_samples.parquet.gzip")
all_flux_samples
all_flux_samples %>% names
all_flux_samples$label
all_flux_samples$label %>% unique
