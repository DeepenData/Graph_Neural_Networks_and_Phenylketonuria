imputed_data
imputed_data %>% is.na()
imputed_data %>% is.na() %>% sum
imputed_data %>% is.na() %>% colSums()
imputed_data %>% is.na() %>% colSums()
dim(imputed_data)
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
setwd("/DeepenData/Repos/geometric_cobra")
#metabolite_data        <- read_csv("./metabolites_data/metabolite_data.csv")
subsys_fluxes_non_zero <- arrow::read_parquet("./results/flux/subsys_fluxes_non_zero.parquet.gzip")
metabolite_data        <- arrow::read_parquet("./metabolites_data/metabolites_outliers_imputed.parquet.gzip")
get_vars_by_quntl <- function(df){
df %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
return(list(vars_q_1, vars_q_2, vars_q_3, vars_q_4))
}
foo <- function(plot){
p <- ggplot_build(plot)
p$data[[1]] <-   p$data[[1]] %>%
mutate(diff = abs(x-round(x)), x = case_when(group %% 2 == 0 ~ round(x) + diff,
TRUE ~ round(x) - diff)) %>%    select(-diff)
return(
(ggplot_gtable(p))
)
}
plot_split_violins <- function(data, quntl_num,vars_by_quntl ,legend.position, logscale, alpha, size_marker){
colours <- c(alpha(c( "dodgerblue2"), alpha), alpha(c("darkorange"), 1))
#data %>% get_vars_by_quntl -> vars_by_quntl
p <- data %>%  select(c(vars_by_quntl[[quntl_num]], "Group")) %>%  pivot_longer(-Group)  %>%
ggplot(aes(name,value,color= Group))+
geom_quasirandom(size= size_marker) + #scale_fill_manual(values = colours, name = "") +
theme_minimal()+
guides(color = guide_legend(override.aes = list(size = 4, alpha = 1) ))+
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
axis.title.y = element_blank(), legend.position=legend.position)+scale_color_discrete(name="")+
scale_colour_manual(values = colours, name = "")
if(logscale){p <-p  + coord_trans( y="log2") }
return(foo(p) %>% as_ggplot)  }
metabolite_data %>% dplyr::select(-c('Phe')) %>% get_vars_by_quntl -> vars_by_quntl
vars_by_quntl[[5]] <- c('Phe')
a_subplot <-plot_split_violins(metabolite_data, 5 , vars_by_quntl, 'top', TRUE, .1, .6)
b_subplot <- plot_split_violins(metabolite_data, 4 , vars_by_quntl, 'none', F, .02, .01)
c_subplot <- plot_split_violins(metabolite_data, 3 , vars_by_quntl, 'none', F, .02, .01)
d_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
e_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
right_swarms <- ggarrange(b_subplot, c_subplot, d_subplot, e_subplot, ncol = 1, labels = c("b","c","d","e"), vjust = 1.1, hjust = .5)
ggarrange(a_subplot, right_swarms, widths = c(.5, 1), labels = c("a",""), vjust = 1.1) -> swarm_panel
make_umap <- function(data){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap -> umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%  sample_n(1000) %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap-> umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%  sample_n(1000) %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap-> umap_plot_2
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap-> umap_plot_2
umap_plot_1
make_umap <- function(data){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap -> umap_plot_1
umap_plot_1
ggarrange(umap_plot_1, umap_plot_2)
make_umap <- function(data, legend.position){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(legend.position=legend.position, text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap('none') -> umap_plot_1
umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap('right')-> umap_plot_2
ggarrange(umap_plot_1, umap_plot_2)
ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
setwd("/DeepenData/Repos/geometric_cobra")
img <- png::readPNG("./results/figures/RECON_graph.png")
graph <- ggplot() + background_image(img)
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
setwd("/DeepenData/Repos/geometric_cobra")
img <- png::readPNG("./results/figures/RECON_graph.png")
graph <- ggplot() + background_image(img)
subsys_fluxes_non_zero
metabolite_data
vars_by_quntl
subsys_fluxes_non_zero %>% names
flux_names[[1]] <- subsys_fluxes_non_zero %>% names
flux_names <- list()
flux_names[[1]] <- subsys_fluxes_non_zero %>% names
flux_names
flux_names <- list()
flux_names[[1]] <- subsys_fluxes_non_zero %>% names
a_subplot <-plot_split_violins(subsys_fluxes_non_zero, 1 , flux_names, 'top', TRUE, .1, .6)
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
subsys_fluxes_non_zero %>% plot_swarm
subsys_fluxes_non_zero %>% plot_swarm(1,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(1,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.4,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.3)
subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.2)
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-7,7))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
subsys_fluxes_non_zero
colSums(subsys_fluxes_non_zero)
colSums(subsys_fluxes_non_zero) < .1
colSums(subsys_fluxes_non_zero) > .1
subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero) > .1]
subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero) > 1]
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero) > 1] %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(500) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(-6,6))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,6))
p + ylim(c(0,6)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.5)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) + xlab('Reaction')
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab('Reaction')+ ylab('Flux')
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal()
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal()
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
setwd("/DeepenData/Repos/geometric_cobra")
#metabolite_data        <- read_csv("./metabolites_data/metabolite_data.csv")
subsys_fluxes_non_zero <- arrow::read_parquet("./results/flux/subsys_fluxes_non_zero.parquet.gzip")
metabolite_data        <- arrow::read_parquet("./metabolites_data/metabolites_outliers_imputed.parquet.gzip")
get_vars_by_quntl <- function(df){
df %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
return(list(vars_q_1, vars_q_2, vars_q_3, vars_q_4))
}
foo <- function(plot){
p <- ggplot_build(plot)
p$data[[1]] <-   p$data[[1]] %>%
mutate(diff = abs(x-round(x)), x = case_when(group %% 2 == 0 ~ round(x) + diff,
TRUE ~ round(x) - diff)) %>%    select(-diff)
return(
(ggplot_gtable(p))
)
}
plot_split_violins <- function(data, quntl_num,vars_by_quntl ,legend.position, logscale, alpha, size_marker){
colours <- c(alpha(c( "dodgerblue2"), alpha), alpha(c("darkorange"), 1))
#data %>% get_vars_by_quntl -> vars_by_quntl
p <- data %>%  select(c(vars_by_quntl[[quntl_num]], "Group")) %>%  pivot_longer(-Group)  %>%
ggplot(aes(name,value,color= Group))+
geom_quasirandom(size= size_marker) + #scale_fill_manual(values = colours, name = "") +
theme_minimal()+
guides(color = guide_legend(override.aes = list(size = 4, alpha = 1) ))+
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
axis.title.y = element_blank(), legend.position=legend.position)+scale_color_discrete(name="")+
scale_colour_manual(values = colours, name = "")
if(logscale){p <-p  + coord_trans( y="log2") }
return(foo(p) %>% as_ggplot)  }
metabolite_data %>% dplyr::select(-c('Phe')) %>% get_vars_by_quntl -> vars_by_quntl
vars_by_quntl[[5]] <- c('Phe')
a_subplot <-plot_split_violins(metabolite_data, 5 , vars_by_quntl, 'top', TRUE, .1, .6)
b_subplot <- plot_split_violins(metabolite_data, 4 , vars_by_quntl, 'none', F, .02, .01)
c_subplot <- plot_split_violins(metabolite_data, 3 , vars_by_quntl, 'none', F, .02, .01)
d_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
e_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
right_swarms <- ggarrange(b_subplot, c_subplot, d_subplot, e_subplot, ncol = 1, labels = c("b","c","d","e"), vjust = 1.1, hjust = .5)
ggarrange(a_subplot, right_swarms, widths = c(.5, 1), labels = c("a",""), vjust = 1.1) -> swarm_panel
make_umap <- function(data, legend.position){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values = c("cadetblue", "blue"))+ theme(legend.position=legend.position, text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap('none') -> umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap('right')-> umap_plot_2
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
setwd("/DeepenData/Repos/geometric_cobra")
img <- png::readPNG("./results/figures/RECON_graph.png")
graph <- ggplot() + background_image(img)
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha, aes(color='red')) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha, aes(color='red3')) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha, aes(color='red4')) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha, aes(color='red4')) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(legend.position = 'none', axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha, aes(color='red4')) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
flux_subplot <- p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(legend.position = 'none', axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggarrange(umap_panel, graph, flux_subplot)
ggarrange(umap_panel, graph, flux_subplot, ncol = 1)
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.8,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1)
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.7,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1)
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1)
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(1,1,.5))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.8,1,.5))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.6,1,.5))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.5))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55)) - right_panel
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55)) -> right_panel
swarm_panel
swarm_panel
ggarrange(swarm_panel, right_panel, ncol = 2)
make_umap <- function(data, legend.position){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values =  c(alpha(c( "dodgerblue2"), 1), alpha(c("darkorange"), 1)))+ theme(legend.position=legend.position, text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap('none') -> umap_plot_1
umap_plot_1
make_umap <- function(data, legend.position){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values =  c(alpha(c( "dodgerblue2"), .5), alpha(c("darkorange"), 1)))+ theme(legend.position=legend.position, text = element_text(size = 9))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap('none') -> umap_plot_1
umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap('right')-> umap_plot_2
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap('none')-> umap_plot_2
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(.65,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55)) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2)
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(1,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55)) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2)
ggarrange(swarm_panel, right_panel, ncol = 2)
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.8))
swarm_panel
library(tidyverse)
library(magrittr)
library(ggbeeswarm)
library(ggpubr)
setwd("/DeepenData/Repos/geometric_cobra")
#metabolite_data        <- read_csv("./metabolites_data/metabolite_data.csv")
subsys_fluxes_non_zero <- arrow::read_parquet("./results/flux/subsys_fluxes_non_zero.parquet.gzip")
metabolite_data        <- arrow::read_parquet("./metabolites_data/metabolites_outliers_imputed.parquet.gzip")
get_vars_by_quntl <- function(df){
df %>%
summarise(across(where(is.double),  ~ mean(.x, na.rm = TRUE))) %>% t -> vars_mean
q_25 <- quantile(vars_mean, 0.25, na.rm = TRUE)[[1]]
q_50 <- quantile(vars_mean, 0.5, na.rm = TRUE)[[1]]
q_75 <- quantile(vars_mean, 0.75, na.rm = TRUE)[[1]]
vars_q_1 <- vars_mean[vars_mean < q_25,] %>% names
vars_q_2 <- vars_mean[q_25 <= vars_mean & vars_mean < q_50,] %>% names
vars_q_3 <- vars_mean[q_50 <= vars_mean &   vars_mean < q_75,] %>% names
vars_q_4 <- vars_mean[q_75 <= vars_mean ,] %>% names
return(list(vars_q_1, vars_q_2, vars_q_3, vars_q_4))
}
foo <- function(plot){
p <- ggplot_build(plot)
p$data[[1]] <-   p$data[[1]] %>%
mutate(diff = abs(x-round(x)), x = case_when(group %% 2 == 0 ~ round(x) + diff,
TRUE ~ round(x) - diff)) %>%    select(-diff)
return(
(ggplot_gtable(p))
)
}
plot_split_violins <- function(data, quntl_num,vars_by_quntl ,legend.position, logscale, alpha, size_marker){
colours <- c(alpha(c( "dodgerblue2"), alpha), alpha(c("darkorange"), 1))
#data %>% get_vars_by_quntl -> vars_by_quntl
p <- data %>%  select(c(vars_by_quntl[[quntl_num]], "Group")) %>%  pivot_longer(-Group)  %>%
ggplot(aes(name,value,color= Group))+
geom_quasirandom(size= size_marker) + #scale_fill_manual(values = colours, name = "") +
theme_minimal()+
guides(color = guide_legend(override.aes = list(size = 4, alpha = 1) ))+
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
axis.title.y = element_blank(), legend.position=legend.position,
legend.text = element_text(size=7))+scale_color_discrete(name="")+
scale_colour_manual(values = colours, name = "")
if(logscale){p <-p  + coord_trans( y="log2") }
return(foo(p) %>% as_ggplot)  }
metabolite_data %>% dplyr::select(-c('Phe')) %>% get_vars_by_quntl -> vars_by_quntl
vars_by_quntl[[5]] <- c('Phe')
a_subplot <-plot_split_violins(metabolite_data, 5 , vars_by_quntl, 'top', TRUE, .1, .6)
b_subplot <- plot_split_violins(metabolite_data, 4 , vars_by_quntl, 'none', F, .02, .01)
c_subplot <- plot_split_violins(metabolite_data, 3 , vars_by_quntl, 'none', F, .02, .01)
d_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
e_subplot <- plot_split_violins(metabolite_data, 2 , vars_by_quntl, 'none', F, .02, .01)
right_swarms <- ggarrange(b_subplot, c_subplot, d_subplot, e_subplot, ncol = 1, labels = c("b","c","d","e"), vjust = 1.1, hjust = .5)
ggarrange(a_subplot, right_swarms, widths = c(.5, 1), labels = c("a",""), vjust = 1.1) -> swarm_panel
swarm_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.8))
right_swarms <- ggarrange(b_subplot, c_subplot, d_subplot, e_subplot, ncol = 1, labels = c("b","c","d","e"), vjust = 1.1, hjust = .5)
ggarrange(a_subplot, right_swarms, widths = c(.55, 1), labels = c("a",""), vjust = 1.1) -> swarm_panel
swarm_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.8))
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.8))
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(1,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55), labels = c("f","g","h")) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(1,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55), labels = c("f","g","h")) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(1,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55), labels = c("f","g","h")) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
?ggarrange
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(1,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55), labels = c("f","g","h"),  vjust = 1.1, hjust = .5) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
make_umap <- function(data, legend.position){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values =  c(alpha(c( "dodgerblue2"), .5), alpha(c("darkorange"), 1)))+
theme(legend.position=legend.position, text = element_text(size = 9), axis.title.y = element_text(size = 7), , axis.title.y = element_text(size = 7))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap('none') -> umap_plot_1
make_umap <- function(data, legend.position){UMAPM <- umap::umap(data  %>% select_if(is.numeric) %>%
as.matrix(), n_neighbors = 20, scale = T, n_threads = 20, fast_sgd = F, metric = 'cosine', spread = 10)
p <- ggplot(as_tibble(UMAPM$layout), aes(V1, V2, colour= data[["Group"]]))
UMAP_reduction <-  p + geom_point(size= .2) + xlab('UMAP dimension 1') + ylab('UMAP dimension 2')+
scale_colour_manual(values =  c(alpha(c( "dodgerblue2"), .5), alpha(c("darkorange"), 1)))+
theme(legend.position=legend.position, text = element_text(size = 9), axis.title.y = element_text(size = 7),  axis.title.x = element_text(size = 7))   +
guides(color = guide_legend(override.aes = list(size = 3) ) )+guides(color = guide_legend(title = "Group", override.aes = list(size = 3) ))
return(UMAP_reduction)}
metabolite_data %>% make_umap('none') -> umap_plot_1
setwd("/DeepenData/Repos/geometric_cobra")
augmented_metabolite_data <- arrow::read_parquet("./results/dataframes/augmented_metabolite_data_v2.parquet.gzip")
augmented_metabolite_data %>%
rename( Group = label) %>% mutate(Group = if_else(Group == 1,'PKU','Control')) %>% make_umap('none')-> umap_plot_2
plot_swarm       <- function(df, size, alpha){
df%>% pivot_longer(everything()) -> long
ggplot(long,aes(name, value)) + geom_quasirandom(size=size, alpha = alpha, aes(color='red4')) -> my_plot
return(my_plot)}
p <- subsys_fluxes_non_zero[,colSums(subsys_fluxes_non_zero)%>%abs > 1] %>% sample_n(1000) %>% abs %>% plot_swarm(.2,.2)
flux_subplot <- p + ylim(c(0,5.9)) +
xlab('Reaction')+ ylab('Flux') + theme_minimal() +  theme(legend.position = 'none', axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(1,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55), labels = c("f","g","h"),  vjust = 1.1, hjust = .5) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7))
umap_panel <-  ggarrange(umap_plot_1, umap_plot_2, widths = c(1,1))
ggarrange(umap_panel, graph, flux_subplot, ncol = 1, heights = c(.4,1,.55), labels = c("f","g","h"),  vjust = 1.1, hjust = .5) -> right_panel
ggarrange(swarm_panel, right_panel, ncol = 2, widths = c(1,.7)) -> figure_1_panel
setwd("/DeepenData/Repos/geometric_cobra")
setwd("/DeepenData/Repos/geometric_cobra")
ggsave("./results/figures/Figure_1.png",
panel, height=6, width=7.5, bg = "white")
setwd("/DeepenData/Repos/geometric_cobra")
ggsave("./results/figures/Figure_1.png",
figure_1_panel, height=6, width=7.5, bg = "white")
setwd("/DeepenData/Repos/geometric_cobra")
ggsave("./results/figures/Figure_1.png",
figure_1_panel, height=6, width=8, bg = "white")
setwd("/DeepenData/Repos/geometric_cobra")
ggsave("./results/figures/Figure_1.png",
figure_1_panel, height=6.5, width=8, bg = "white")
